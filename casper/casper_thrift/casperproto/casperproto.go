// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package casperproto

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type CasperServer interface {
  // Parameters:
  //  - Hash
  //  - IpfsAddr
  //  - SizeToStore
  SendUploadQuery(ctx context.Context, hash string, ipfsAddr string, sizeToStore int64) (r string, err error)
  // Parameters:
  //  - Hash
  //  - IpfsAddr
  //  - Wallet
  SendDownloadQuery(ctx context.Context, hash string, ipfsAddr string, wallet string) (r string, err error)
  // Parameters:
  //  - Hash
  SendDeleteQuery(ctx context.Context, hash string) (r string, err error)
  Ping(ctx context.Context) (r int64, err error)
}

type CasperServerClient struct {
  c thrift.TClient
}

// Deprecated: Use NewCasperServer instead
func NewCasperServerClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *CasperServerClient {
  return &CasperServerClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewCasperServer instead
func NewCasperServerClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *CasperServerClient {
  return &CasperServerClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewCasperServerClient(c thrift.TClient) *CasperServerClient {
  return &CasperServerClient{
    c: c,
  }
}

// Parameters:
//  - Hash
//  - IpfsAddr
//  - SizeToStore
func (p *CasperServerClient) SendUploadQuery(ctx context.Context, hash string, ipfsAddr string, sizeToStore int64) (r string, err error) {
  var _args0 CasperServerSendUploadQueryArgs
  _args0.Hash = hash
  _args0.IpfsAddr = ipfsAddr
  _args0.SizeToStore = sizeToStore
  var _result1 CasperServerSendUploadQueryResult
  if err = p.c.Call(ctx, "SendUploadQuery", &_args0, &_result1); err != nil {
    return
  }
  return _result1.GetSuccess(), nil
}

// Parameters:
//  - Hash
//  - IpfsAddr
//  - Wallet
func (p *CasperServerClient) SendDownloadQuery(ctx context.Context, hash string, ipfsAddr string, wallet string) (r string, err error) {
  var _args2 CasperServerSendDownloadQueryArgs
  _args2.Hash = hash
  _args2.IpfsAddr = ipfsAddr
  _args2.Wallet = wallet
  var _result3 CasperServerSendDownloadQueryResult
  if err = p.c.Call(ctx, "SendDownloadQuery", &_args2, &_result3); err != nil {
    return
  }
  return _result3.GetSuccess(), nil
}

// Parameters:
//  - Hash
func (p *CasperServerClient) SendDeleteQuery(ctx context.Context, hash string) (r string, err error) {
  var _args4 CasperServerSendDeleteQueryArgs
  _args4.Hash = hash
  var _result5 CasperServerSendDeleteQueryResult
  if err = p.c.Call(ctx, "SendDeleteQuery", &_args4, &_result5); err != nil {
    return
  }
  return _result5.GetSuccess(), nil
}

func (p *CasperServerClient) Ping(ctx context.Context) (r int64, err error) {
  var _args6 CasperServerPingArgs
  var _result7 CasperServerPingResult
  if err = p.c.Call(ctx, "Ping", &_args6, &_result7); err != nil {
    return
  }
  return _result7.GetSuccess(), nil
}

type CasperServerProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler CasperServer
}

func (p *CasperServerProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *CasperServerProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *CasperServerProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewCasperServerProcessor(handler CasperServer) *CasperServerProcessor {

  self8 := &CasperServerProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self8.processorMap["SendUploadQuery"] = &casperServerProcessorSendUploadQuery{handler:handler}
  self8.processorMap["SendDownloadQuery"] = &casperServerProcessorSendDownloadQuery{handler:handler}
  self8.processorMap["SendDeleteQuery"] = &casperServerProcessorSendDeleteQuery{handler:handler}
  self8.processorMap["Ping"] = &casperServerProcessorPing{handler:handler}
return self8
}

func (p *CasperServerProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x9 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x9.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x9

}

type casperServerProcessorSendUploadQuery struct {
  handler CasperServer
}

func (p *casperServerProcessorSendUploadQuery) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CasperServerSendUploadQueryArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("SendUploadQuery", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CasperServerSendUploadQueryResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.SendUploadQuery(ctx, args.Hash, args.IpfsAddr, args.SizeToStore); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SendUploadQuery: " + err2.Error())
    oprot.WriteMessageBegin("SendUploadQuery", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("SendUploadQuery", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type casperServerProcessorSendDownloadQuery struct {
  handler CasperServer
}

func (p *casperServerProcessorSendDownloadQuery) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CasperServerSendDownloadQueryArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("SendDownloadQuery", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CasperServerSendDownloadQueryResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.SendDownloadQuery(ctx, args.Hash, args.IpfsAddr, args.Wallet); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SendDownloadQuery: " + err2.Error())
    oprot.WriteMessageBegin("SendDownloadQuery", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("SendDownloadQuery", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type casperServerProcessorSendDeleteQuery struct {
  handler CasperServer
}

func (p *casperServerProcessorSendDeleteQuery) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CasperServerSendDeleteQueryArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("SendDeleteQuery", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CasperServerSendDeleteQueryResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.SendDeleteQuery(ctx, args.Hash); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SendDeleteQuery: " + err2.Error())
    oprot.WriteMessageBegin("SendDeleteQuery", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("SendDeleteQuery", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type casperServerProcessorPing struct {
  handler CasperServer
}

func (p *casperServerProcessorPing) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CasperServerPingArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("Ping", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CasperServerPingResult{}
var retval int64
  var err2 error
  if retval, err2 = p.handler.Ping(ctx); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Ping: " + err2.Error())
    oprot.WriteMessageBegin("Ping", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("Ping", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Hash
//  - IpfsAddr
//  - SizeToStore
type CasperServerSendUploadQueryArgs struct {
  Hash string `thrift:"hash,1" db:"hash" json:"hash"`
  IpfsAddr string `thrift:"ipfsAddr,2" db:"ipfsAddr" json:"ipfsAddr"`
  SizeToStore int64 `thrift:"sizeToStore,3" db:"sizeToStore" json:"sizeToStore"`
}

func NewCasperServerSendUploadQueryArgs() *CasperServerSendUploadQueryArgs {
  return &CasperServerSendUploadQueryArgs{}
}


func (p *CasperServerSendUploadQueryArgs) GetHash() string {
  return p.Hash
}

func (p *CasperServerSendUploadQueryArgs) GetIpfsAddr() string {
  return p.IpfsAddr
}

func (p *CasperServerSendUploadQueryArgs) GetSizeToStore() int64 {
  return p.SizeToStore
}
func (p *CasperServerSendUploadQueryArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CasperServerSendUploadQueryArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Hash = v
}
  return nil
}

func (p *CasperServerSendUploadQueryArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IpfsAddr = v
}
  return nil
}

func (p *CasperServerSendUploadQueryArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SizeToStore = v
}
  return nil
}

func (p *CasperServerSendUploadQueryArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SendUploadQuery_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CasperServerSendUploadQueryArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hash", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hash: ", p), err) }
  if err := oprot.WriteString(string(p.Hash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hash (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hash: ", p), err) }
  return err
}

func (p *CasperServerSendUploadQueryArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ipfsAddr", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ipfsAddr: ", p), err) }
  if err := oprot.WriteString(string(p.IpfsAddr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ipfsAddr (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ipfsAddr: ", p), err) }
  return err
}

func (p *CasperServerSendUploadQueryArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sizeToStore", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sizeToStore: ", p), err) }
  if err := oprot.WriteI64(int64(p.SizeToStore)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sizeToStore (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sizeToStore: ", p), err) }
  return err
}

func (p *CasperServerSendUploadQueryArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CasperServerSendUploadQueryArgs(%+v)", *p)
}

// Attributes:
//  - Success
type CasperServerSendUploadQueryResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewCasperServerSendUploadQueryResult() *CasperServerSendUploadQueryResult {
  return &CasperServerSendUploadQueryResult{}
}

var CasperServerSendUploadQueryResult_Success_DEFAULT string
func (p *CasperServerSendUploadQueryResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return CasperServerSendUploadQueryResult_Success_DEFAULT
  }
return *p.Success
}
func (p *CasperServerSendUploadQueryResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CasperServerSendUploadQueryResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CasperServerSendUploadQueryResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *CasperServerSendUploadQueryResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SendUploadQuery_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CasperServerSendUploadQueryResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CasperServerSendUploadQueryResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CasperServerSendUploadQueryResult(%+v)", *p)
}

// Attributes:
//  - Hash
//  - IpfsAddr
//  - Wallet
type CasperServerSendDownloadQueryArgs struct {
  Hash string `thrift:"hash,1" db:"hash" json:"hash"`
  IpfsAddr string `thrift:"ipfsAddr,2" db:"ipfsAddr" json:"ipfsAddr"`
  Wallet string `thrift:"wallet,3" db:"wallet" json:"wallet"`
}

func NewCasperServerSendDownloadQueryArgs() *CasperServerSendDownloadQueryArgs {
  return &CasperServerSendDownloadQueryArgs{}
}


func (p *CasperServerSendDownloadQueryArgs) GetHash() string {
  return p.Hash
}

func (p *CasperServerSendDownloadQueryArgs) GetIpfsAddr() string {
  return p.IpfsAddr
}

func (p *CasperServerSendDownloadQueryArgs) GetWallet() string {
  return p.Wallet
}
func (p *CasperServerSendDownloadQueryArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CasperServerSendDownloadQueryArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Hash = v
}
  return nil
}

func (p *CasperServerSendDownloadQueryArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IpfsAddr = v
}
  return nil
}

func (p *CasperServerSendDownloadQueryArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Wallet = v
}
  return nil
}

func (p *CasperServerSendDownloadQueryArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SendDownloadQuery_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CasperServerSendDownloadQueryArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hash", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hash: ", p), err) }
  if err := oprot.WriteString(string(p.Hash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hash (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hash: ", p), err) }
  return err
}

func (p *CasperServerSendDownloadQueryArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ipfsAddr", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ipfsAddr: ", p), err) }
  if err := oprot.WriteString(string(p.IpfsAddr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ipfsAddr (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ipfsAddr: ", p), err) }
  return err
}

func (p *CasperServerSendDownloadQueryArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("wallet", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:wallet: ", p), err) }
  if err := oprot.WriteString(string(p.Wallet)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.wallet (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:wallet: ", p), err) }
  return err
}

func (p *CasperServerSendDownloadQueryArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CasperServerSendDownloadQueryArgs(%+v)", *p)
}

// Attributes:
//  - Success
type CasperServerSendDownloadQueryResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewCasperServerSendDownloadQueryResult() *CasperServerSendDownloadQueryResult {
  return &CasperServerSendDownloadQueryResult{}
}

var CasperServerSendDownloadQueryResult_Success_DEFAULT string
func (p *CasperServerSendDownloadQueryResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return CasperServerSendDownloadQueryResult_Success_DEFAULT
  }
return *p.Success
}
func (p *CasperServerSendDownloadQueryResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CasperServerSendDownloadQueryResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CasperServerSendDownloadQueryResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *CasperServerSendDownloadQueryResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SendDownloadQuery_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CasperServerSendDownloadQueryResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CasperServerSendDownloadQueryResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CasperServerSendDownloadQueryResult(%+v)", *p)
}

// Attributes:
//  - Hash
type CasperServerSendDeleteQueryArgs struct {
  Hash string `thrift:"hash,1" db:"hash" json:"hash"`
}

func NewCasperServerSendDeleteQueryArgs() *CasperServerSendDeleteQueryArgs {
  return &CasperServerSendDeleteQueryArgs{}
}


func (p *CasperServerSendDeleteQueryArgs) GetHash() string {
  return p.Hash
}
func (p *CasperServerSendDeleteQueryArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CasperServerSendDeleteQueryArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Hash = v
}
  return nil
}

func (p *CasperServerSendDeleteQueryArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SendDeleteQuery_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CasperServerSendDeleteQueryArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hash", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hash: ", p), err) }
  if err := oprot.WriteString(string(p.Hash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hash (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hash: ", p), err) }
  return err
}

func (p *CasperServerSendDeleteQueryArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CasperServerSendDeleteQueryArgs(%+v)", *p)
}

// Attributes:
//  - Success
type CasperServerSendDeleteQueryResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewCasperServerSendDeleteQueryResult() *CasperServerSendDeleteQueryResult {
  return &CasperServerSendDeleteQueryResult{}
}

var CasperServerSendDeleteQueryResult_Success_DEFAULT string
func (p *CasperServerSendDeleteQueryResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return CasperServerSendDeleteQueryResult_Success_DEFAULT
  }
return *p.Success
}
func (p *CasperServerSendDeleteQueryResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CasperServerSendDeleteQueryResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CasperServerSendDeleteQueryResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *CasperServerSendDeleteQueryResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SendDeleteQuery_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CasperServerSendDeleteQueryResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CasperServerSendDeleteQueryResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CasperServerSendDeleteQueryResult(%+v)", *p)
}

type CasperServerPingArgs struct {
}

func NewCasperServerPingArgs() *CasperServerPingArgs {
  return &CasperServerPingArgs{}
}

func (p *CasperServerPingArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CasperServerPingArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Ping_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CasperServerPingArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CasperServerPingArgs(%+v)", *p)
}

// Attributes:
//  - Success
type CasperServerPingResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewCasperServerPingResult() *CasperServerPingResult {
  return &CasperServerPingResult{}
}

var CasperServerPingResult_Success_DEFAULT int64
func (p *CasperServerPingResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return CasperServerPingResult_Success_DEFAULT
  }
return *p.Success
}
func (p *CasperServerPingResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CasperServerPingResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CasperServerPingResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *CasperServerPingResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Ping_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CasperServerPingResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CasperServerPingResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CasperServerPingResult(%+v)", *p)
}


