// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package casper

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// CasperABI is the input ABI used to generate the binding from.
const CasperABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"nodeID\",\"type\":\"string\"},{\"name\":\"addr\",\"type\":\"string\"}],\"name\":\"setAPIAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeID\",\"type\":\"string\"},{\"name\":\"fileID\",\"type\":\"string\"},{\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"confirmUpload\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"fileID\",\"type\":\"string\"}],\"name\":\"showStoringPeers\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmDownload\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSystemState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeID\",\"type\":\"string\"},{\"name\":\"addr\",\"type\":\"string\"}],\"name\":\"setRPCAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllPeers\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"bytes4[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeID\",\"type\":\"string\"},{\"name\":\"telegram\",\"type\":\"bytes32\"},{\"name\":\"apiAddr\",\"type\":\"string\"},{\"name\":\"rpcAddr\",\"type\":\"string\"},{\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"registerProvider\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeID\",\"type\":\"string\"}],\"name\":\"removeProviderMachine\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeID\",\"type\":\"string\"},{\"name\":\"fileID\",\"type\":\"string\"},{\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"confirmUpdate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"fileID\",\"type\":\"string\"}],\"name\":\"getStoringPeers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nodeID\",\"type\":\"string\"},{\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"getFile\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearPrepay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"client\",\"type\":\"address\"}],\"name\":\"isPrepaid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"size\",\"type\":\"uint256\"},{\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"getPeers\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBlockTime\",\"outputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fileID\",\"type\":\"string\"},{\"name\":\"consensus\",\"type\":\"bool[16]\"},{\"name\":\"nodeIds\",\"type\":\"bytes32[4]\"}],\"name\":\"checkVerification\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"}],\"name\":\"setBootstrap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pay\",\"type\":\"uint256\"}],\"name\":\"prePay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nodeID\",\"type\":\"string\"}],\"name\":\"getNodeAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPingTarget\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nodeID\",\"type\":\"string\"}],\"name\":\"getNumberOfFiles\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeID\",\"type\":\"string\"},{\"name\":\"originCode\",\"type\":\"bytes4\"}],\"name\":\"setCountryCode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"confirmTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBannedPeers\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"removeAllPeers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"name\":\"notifyDelete\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fileID\",\"type\":\"string\"},{\"name\":\"nodeID\",\"type\":\"string\"}],\"name\":\"notifyVerificationTarget\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBootstrap\",\"outputs\":[{\"name\":\"id\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeID\",\"type\":\"string\"},{\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"sendPingResult\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nodeID\",\"type\":\"string\"}],\"name\":\"getBanStats\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeID\",\"type\":\"string\"},{\"name\":\"fileID\",\"type\":\"string\"},{\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"notifySpaceFreed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nodeID\",\"type\":\"string\"}],\"name\":\"machineInformation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nodeID\",\"type\":\"string\"}],\"name\":\"isDead\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"info\",\"type\":\"string\"}],\"name\":\"Log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"banned\",\"type\":\"string\"}],\"name\":\"ProviderOffline\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"val\",\"type\":\"string\"}],\"name\":\"ReturnString\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"UUID\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"string\"}],\"name\":\"verificationTarget\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"string\"}],\"name\":\"ProviderCheckEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"UUID\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"consensus\",\"type\":\"bytes32[4]\"}],\"name\":\"ConsensusResult\",\"type\":\"event\"}]"

// CasperBin is the compiled bytecode used for deploying new contracts.
const CasperBin = `0x60806040526000805534801561001457600080fd5b50614258806100246000396000f30060806040526004361061019d5763ffffffff60e060020a60003504166302d87d4681146101a257806309f1179b1461023b578063179d375c146102d4578063205211b6146102ec57806328748e91146104ef57806328fa777f146105045780632add305a146105445780632d62b810146105db5780634d474b99146107135780635107e4ee146107f05780635a44a1171461084957806363f17cda146108e25780636cf0d3921461094d5780636e2e188714610a2757806373e07e1414610a3c578063776b0f0414610a7157806387ceff0914610a8c5780639e32cf9214610aa1578063a746dadb14610b47578063aac80f4714610ba0578063ab40eaa814610bb8578063afeb7c5914610cef578063afffcb9d14610d79578063b6254bd514610dd2578063baa4930114610e37578063c084272814610e4c578063c13aaeaf14610f3f578063c72f7c5414610f54578063d5109c8614610f7e578063d9290af914611015578063dc3dd5781461102a578063df4b5f8314611087578063ed0e4f82146110fe578063f8c5df3314611197578063fdf9f27d146111f0575b600080fd5b3480156101ae57600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261023994369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506112499650505050505050565b005b34801561024757600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261023994369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750949750509335945061139f9350505050565b3480156102e057600080fd5b50610239600435611600565b3480156102f857600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526103459436949293602493928401919081908401838280828437509497506116189650505050505050565b6040518080602001806020018060200180602001858103855289818151815260200191508051906020019080838360005b8381101561038e578181015183820152602001610376565b50505050905090810190601f1680156103bb5780820380516001836020036101000a031916815260200191505b5085810384528851815288516020918201918a019080838360005b838110156103ee5781810151838201526020016103d6565b50505050905090810190601f16801561041b5780820380516001836020036101000a031916815260200191505b50858103835287518152875160209182019189019080838360005b8381101561044e578181015183820152602001610436565b50505050905090810190601f16801561047b5780820380516001836020036101000a031916815260200191505b50858103825286518152865160209182019188019080838360005b838110156104ae578181015183820152602001610496565b50505050905090810190601f1680156104db5780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b3480156104fb57600080fd5b50610239611770565b34801561051057600080fd5b5061051961177b565b6040805195865260208601949094528484019290925260608401526080830152519081900360a00190f35b34801561055057600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261023994369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506118039650505050505050565b3480156105e757600080fd5b506105f0611922565b6040518080602001806020018060200180602001858103855289818151815260200191508051906020019060200280838360005b8381101561063c578181015183820152602001610624565b50505050905001858103845288818151815260200191508051906020019060200280838360005b8381101561067b578181015183820152602001610663565b50505050905001858103835287818151815260200191508051906020019060200280838360005b838110156106ba5781810151838201526020016106a2565b50505050905001858103825286818151815260200191508051906020019060200280838360005b838110156106f95781810151838201526020016106e1565b505050509050019850505050505050505060405180910390f35b34801561071f57600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261023994369492936024939284019190819084018382808284375050604080516020601f818a01358b0180359182018390048302840183018552818452989b8a359b909a90999401975091955091820193509150819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497505093359450611d579350505050565b3480156107fc57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526102399436949293602493928401919081908401838280828437509497506120c79650505050505050565b34801561085557600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261023994369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750949750509335945061235e9350505050565b3480156108ee57600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261093b9436949293602493928401919081908401838280828437509497506125979650505050505050565b60408051918252519081900360200190f35b34801561095957600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526109a894369492936024939284019190819084018382808284375094975050933594506125bd9350505050565b6040518080602001838152602001828103825284818151815260200191508051906020019080838360005b838110156109eb5781810151838201526020016109d3565b50505050905090810190601f168015610a185780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b348015610a3357600080fd5b506102396126ac565b348015610a4857600080fd5b50610a5d600160a060020a03600435166126be565b604080519115158252519081900360200190f35b348015610a7d57600080fd5b506103456004356024356126db565b348015610a9857600080fd5b5061093b61294e565b348015610aad57600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261023994369492936024939284019190819084018382808284375050604080516102008181019092529598979681810196955093506010925084915083908082843750506040805160808181019092529497969581810195945092506004915083908390808284375093965061295395505050505050565b348015610b5357600080fd5b506040805160206004803580820135601f8101849004840285018401909552848452610239943694929360249392840191908190840183828082843750949750612c3a9650505050505050565b348015610bac57600080fd5b50610239600435612ce6565b348015610bc457600080fd5b506040805160206004803580820135601f8101849004840285018401909552848452610c11943694929360249392840191908190840183828082843750949750612d619650505050505050565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b83811015610c52578181015183820152602001610c3a565b50505050905090810190601f168015610c7f5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015610cb2578181015183820152602001610c9a565b50505050905090810190601f168015610cdf5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b348015610cfb57600080fd5b50610d04612eb1565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610d3e578181015183820152602001610d26565b50505050905090810190601f168015610d6b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610d8557600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261093b943694929360249392840191908190840183828082843750949750612f899650505050505050565b348015610dde57600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261023994369492936024939284019190819084018382808284375094975050509235600160e060020a0319169350612f9892505050565b348015610e4357600080fd5b5061023961300d565b348015610e5857600080fd5b50610e6161300f565b60405180806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b83811015610ea9578181015183820152602001610e91565b50505050905001848103835286818151815260200191508051906020019060200280838360005b83811015610ee8578181015183820152602001610ed0565b50505050905001848103825285818151815260200191508051906020019060200280838360005b83811015610f27578181015183820152602001610f0f565b50505050905001965050505050505060405180910390f35b348015610f4b57600080fd5b506102396133e7565b348015610f6057600080fd5b506102396fffffffffffffffffffffffffffffffff60043516613791565b348015610f8a57600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261023994369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506137949650505050505050565b34801561102157600080fd5b50610d04613898565b34801561103657600080fd5b506040805160206004803580820135601f8101849004840285018401909552848452610239943694929360249392840191908190840183828082843750949750505050913515159250613981915050565b34801561109357600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526110e0943694929360249392840191908190840183828082843750949750613c269650505050505050565b60408051938452602084019290925282820152519081900360600190f35b34801561110a57600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261023994369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497505093359450613c669350505050565b3480156111a357600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261093b943694929360249392840191908190840183828082843750949750613d7c9650505050505050565b3480156111fc57600080fd5b506040805160206004803580820135601f8101849004840285018401909552848452610a5d943694929360249392840191908190840183828082843750949750613da59650505050505050565b60006003600061125885613df4565b81526020810191909152604001600020905061127382613df4565b600282810180546040805160206000196001851615610100020190931694909404601f81018390048302850183019091528084526113089392918301828280156112fe5780601f106112d3576101008083540402835291602001916112fe565b820191906000526020600020905b8154815290600101906020018083116112e157829003601f168201915b5050505050613df4565b1415611384576040805160e560020a62461bcd02815260206004820152602a60248201527f6164647265737320697320616c726561647920657175616c20746f2070726f7660448201527f696465642076616c756500000000000000000000000000000000000000000000606482015290519081900360840190fd5b81516113999060028301906020850190613fef565b50505050565b60008060006113ac614069565b6113b587613df4565b600081815260036020526040902090945092506001600984015460ff1660018111156113dd57fe5b1415611433576040805160e560020a62461bcd02815260206004820152600e60248201527f6e6f64652069732062616e6e6564000000000000000000000000000000000000604482015290519081900360640190fd5b600d8301548511156114b5576040805160e560020a62461bcd02815260206004820152602360248201527f6e6f646520646f65736e2774206861766520656e6f756768206672656520737060448201527f6163650000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6114be86613df4565b600d84018054879003905560408051808201825288815260208082018990526000888152600482529283208054600181018083559185529382902083518051969850939650909486946002029091019261151c928492910190613fef565b5060209182015160019182015560008581526005835260408082208054840190556006845281208054928301808255908252908390208b51919450611566939201918b0190613fef565b50506000805460010190556040805160208082526022908201527f55706c6f616420776173207375636365737366756c6c7920636f6e6669726d65818301527f6421000000000000000000000000000000000000000000000000000000000000606082015290517fcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab9181900360800190a150505050505050565b33600090815260026020526040902080549091019055565b606080606080611626614081565b60008060008060606006600061163b8d613df4565b8152602081019190915260400160009081208054909650945092508291505b83821080156116695750600483105b1561174957848281548110151561167c57fe5b600091825260209182902001805460408051601f600260001961010060018716150201909416939093049283018590048502810185019091528181529283018282801561170a5780601f106116df5761010080835404028352916020019161170a565b820191906000526020600020905b8154815290600101906020018083116116ed57829003601f168201915b5050505050905061171a81613da5565b156117245761173e565b8086846004811061173157fe5b6020020152600192909201915b60019091019061165a565b5050835160208501516040860151606090960151919b909a50949850965092945050505050565b600080546001019055565b60085460009081908190819081908190819081805b828210156117e557600360006008848154811015156117ab57fe5b600091825260208083209091015483528201929092526040019020600d810154600c82015496019594909401936001909201919050611790565b5050600854600954600054919a909950929750929550919350915050565b60006003600061181285613df4565b81526020810191909152604001600020905061182d82613df4565b600382018054604080516020601f6002610100600187161502600019019095169490940493840181900481028201810190925282815261189193909290918301828280156112fe5780601f106112d3576101008083540402835291602001916112fe565b141561190d576040805160e560020a62461bcd02815260206004820152602a60248201527f6164647265737320697320616c726561647920657175616c20746f2070726f7660448201527f696465642076616c756500000000000000000000000000000000000000000000606482015290519081900360840190fd5b81516113999060038301906020850190613fef565b6060806060806000606080606080600061193a6140a9565b600854604080518281526020808402820101909152909750878015611969578160200160208202803883390190505b50955086604051908082528060200260200182016040528015611996578160200160208202803883390190505b509450866040519080825280602002602001820160405280156119c3578160200160208202803883390190505b509350866040519080825280602002602001820160405280156119f0578160200160208202803883390190505b509250600091505b86821015611d465760036000600884815481101515611a1357fe5b6000918252602080832090910154835282810193909352604091820190208151610200810183528154600160a060020a03168152600180830180548551601f6002948316156101000260001901909216939093049081018790048702830187019095528482529194929385840193919291830182828015611ad55780601f10611aaa57610100808354040283529160200191611ad5565b820191906000526020600020905b815481529060010190602001808311611ab857829003601f168201915b5050509183525050600282810180546040805160206001841615610100026000190190931694909404601f81018390048302850183019091528084529381019390830182828015611b675780601f10611b3c57610100808354040283529160200191611b67565b820191906000526020600020905b815481529060010190602001808311611b4a57829003601f168201915b505050918352505060038201805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152938201939291830182828015611bfb5780601f10611bd057610100808354040283529160200191611bfb565b820191906000526020600020905b815481529060010190602001808311611bde57829003601f168201915b505050918352505060048201546020820152600582015460408201526006820154606082015260078201546080820152600882015460a0820152600982015460c09091019060ff166001811115611c4e57fe5b6001811115611c5957fe5b8152600a820154602080830191909152600b8301546040830152600c8301546060830152600d8301546080830152600e83015460a0830152600f9092015460e060020a02600160e060020a03191660c090910152810151909150611cbc90613ebe565b8683815181101515611cca57fe5b6020908102909101015260808101518551869084908110611ce757fe5b602090810290910101526101c08101518451859084908110611d0557fe5b602090810290910101526101e08101518351849084908110611d2357fe5b600160e060020a03199092166020928302909101909101526001909101906119f8565b509399929850909650945092505050565b600080611d626140a9565b60008411611dba576040805160e560020a62461bcd02815260206004820152600960248201527f7a65726f2073697a650000000000000000000000000000000000000000000000604482015290519081900360640190fd5b611dc388613df4565b6000818152600360205260409020600c015490935015611e2d576040805160e560020a62461bcd02815260206004820152601e60248201527f70726f766964657220697320616c726561647920726567697374657265640000604482015290519081900360640190fd5b336000908152600260205260409020805460018201549193506080029085011115611ec8576040805160e560020a62461bcd02815260206004820152602160248201527f70726f76696465722068617320696e73756666696369656e742062616c616e6360448201527f6500000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b506001818101805485019055604080516102008101825233815260208082018b81528284018a90526060830189905242608084015260085460a0840152600060c0840181905260e08401819052610100840181905261012084018190526101408401819052610160840181905261018084018990526101a084018990526101c084018c90526101e0840181905287815260038352939093208251815473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03909116178155925180519294859493611fa3939185019290910190613fef565b5060408201518051611fbf916002840191602090910190613fef565b5060608201518051611fdb916003840191602090910190613fef565b506080820151600482015560a0820151600582015560c0820151600682015560e08201516007820155610100820151600882015561012082015160098201805460ff19166001838181111561202c57fe5b0217905550610140820151600a820155610160820151600b820155610180820151600c8201556101a0820151600d8201556101c0820151600e8201556101e090910151600f909101805463ffffffff191660e060020a9092049190911790555050600880546001810182556000919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee301555050505050565b60008060006120d584613df4565b6000818152600360205260409020600c81015491945092501515612143576040805160e560020a62461bcd02815260206004820152601260248201527f6e6f646520646f65736e27742065786973740000000000000000000000000000604482015290519081900360640190fd5b6001600983015460ff16600181111561215857fe5b14156121ee5750600a81015460098054600019810190811061217657fe5b906000526020600020015460098281548110151561219057fe5b90600052602060002001816000191690555080600360006009848154811015156121b657fe5b600091825260208083209091015483528201929092526040019020600a01556009805460001901906121e8908261413b565b5061227a565b50600581015460088054600019810190811061220657fe5b906000526020600020015460088281548110151561222057fe5b906000526020600020018160001916905550806003600060088481548110151561224657fe5b60009182526020808320909101548352820192909252604001902060050155600880546000190190612278908261413b565b505b600c8201548254600160a060020a03166000908152600260209081526040808320600190810180549590950390945586835260039091528120805473ffffffffffffffffffffffffffffffffffffffff19168155916122db90830182614164565b6122e9600283016000614164565b6122f7600383016000614164565b506000600482018190556005820181905560068201819055600782018190556008820181905560098201805460ff19169055600a8201819055600b8201819055600c8201819055600d8201819055600e820155600f01805463ffffffff1916905550505050565b600080612369614069565b600080600061237789613df4565b6000818152600360209081526040808320815180830183528d81528084018d90528585526004909352908320549399509750955090935091505b828210156125065760008681526004602052604090208054839081106123d357fe5b906000526020600020906002020190506123ec88613df4565b815460408051602060026000196001861615610100020190941693909304601f810184900484028201840190925281815261244b92909185918301828280156112fe5780601f106112d3576101008083540402835291602001916112fe565b14156124fb5760208401516001820154600d87015401116124dc576040805160e560020a62461bcd02815260206004820152602360248201527f6e6f646520646f65736e2774206861766520656e6f756768206672656520737060448201527f6163650000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6020840151600182018054600d88018054909101839003905555612506565b6001909101906123b1565b6040805160208082526022908201527f55706461746520776173207375636365737366756c6c7920636f6e6669726d65818301527f6421000000000000000000000000000000000000000000000000000000000000606082015290517fcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab9181900360800190a1505050505050505050565b6000600560006125a684613df4565b815260208101919091526040016000205492915050565b6060600080600460006125cf87613df4565b815260208101919091526040016000208054859081106125eb57fe5b90600052602060002090600202019050806000018160010154818054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156126995780601f1061266e57610100808354040283529160200191612699565b820191906000526020600020905b81548152906001019060200180831161267c57829003601f168201915b5050505050915092509250509250929050565b33600090815260016020526040812055565b600160a060020a0316600090815260016020526040902054151590565b60608060608060606000806126ee614081565b60008a11612746576040805160e560020a62461bcd02815260206004820152600960248201527f7a65726f2073697a650000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600880548060200260200160405190810160405280929190818152602001828054801561279357602002820191906000526020600020905b8154815260019091019060200180831161277e575b50505050509350600092505b6004831080156127af5750835183105b15612833576127c38360018651038b613edd565b915083828151811015156127d357fe5b9060200190602002015184848151811015156127eb57fe5b90602001906020020151858581518110151561280357fe5b906020019060200201868581518110151561281a57fe5b602090810290910101919091525260019092019161279f565b600092505b6004831080156128485750835183105b156129295760036000858581518110151561285f57fe5b60209081029091018101518252818101929092526040908101600020600190810180548351601f60026101009584161595909502600019019092169390930490810185900485028301850190935282825290929091908301828280156129065780601f106128db57610100808354040283529160200191612906565b820191906000526020600020905b8154815290600101906020018083116128e957829003601f168201915b5050505050818460048110151561291957fe5b6020020152600190920191612838565b805160208201516040830151606090930151919c909b50919950975095505050505050565b425b90565b61295b6141a8565b6004600080808080805b6004861015612b225760009450600093505b60048410156129ad57896004870285016010811061299157fe5b6020020151156129a2576001909401935b600190930192612977565b848887600481106129ba57fe5b60200201526001851415612b17576129d18b613df4565b600081815260066020908152604080832054600590925282208054600019908101909155999099019891945090925090505b81811015612b1757888660048110612a1757fe5b602090810291909101516000858152600690925260409091208054612ad9919084908110612a4157fe5b600091825260209182902001805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015612acf5780601f10612aa457610100808354040283529160200191612acf565b820191906000526020600020905b815481529060010190602001808311612ab257829003601f168201915b5050505050613ebe565b1415612b0f576000838152600660205260409020805482908110612af957fe5b906000526020600020016000612b0f9190614164565b600101612a03565b600190950194612965565b600095505b6004861015612b675786888760048110612b3d57fe5b60200201511415612b5c576000898760048110612b5657fe5b60200201525b600190950194612b27565b7fd969f986c5791f358032ad1011b25b3e1e4e3a879a128c851d06cef9202069e08b8a604051808060200183600460200280838360005b83811015612bb6578181015183820152602001612b9e565b50505050905001828103825284818151815260200191508051906020019080838360005b83811015612bf2578181015183820152602001612bda565b50505050905090810190601f168015612c1f5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15050505050505050505050565b6000612c4582613df4565b6000818152600360205260409020600c01549091501515612cb0576040805160e560020a62461bcd02815260206004820152601260248201527f6e6f646520646f65736e27742065786973740000000000000000000000000000604482015290519081900360640190fd5b600a80546001810182556000919091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8015550565b336000908152600160209081526040918290208054840190558151818152600f918101919091527f50617920697320737563636573732100000000000000000000000000000000008183015290517fcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab9181900360600190a150565b606080600060036000612d7386613df4565b815260208082019290925260409081016000206003810180548351600260001960018416156101000201909216829004601f81018790048702820187019095528481529295509093908501928491830182828015612e125780601f10612de757610100808354040283529160200191612e12565b820191906000526020600020905b815481529060010190602001808311612df557829003601f168201915b5050845460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815295975086945092508401905082828015612ea05780601f10612e7557610100808354040283529160200191612ea0565b820191906000526020600020905b815481529060010190602001808311612e8357829003601f168201915b505050505090509250925050915091565b606060006008612ecc60006001600880549050036003613edd565b81548110612ed657fe5b600091825260208083209091015480835260038252604092839020600190810180548551601f600261010095841615959095026000190190921693909304908101859004850283018501909552848252919450929091830182828015612f7d5780601f10612f5257610100808354040283529160200191612f7d565b820191906000526020600020905b815481529060010190602001808311612f6057829003601f168201915b505050505091505b5090565b6000600460006125a684613df4565b600060036000612fa785613df4565b81526020810191909152604001600020600f81015490915060e060020a02600160e060020a031916158015612fe557508054600160a060020a031633145b1515612ff057600080fd5b600f01805463ffffffff191660e060020a90920491909117905550565b565b60608060606000606080606060006130256140a9565b600954604080518281526020808402820101909152909650868015613054578160200160208202803883390190505b50945085604051908082528060200260200182016040528015613081578160200160208202803883390190505b509350856040519080825280602002602001820160405280156130ae578160200160208202803883390190505b509250600091505b858210156133d957600360006009848154811015156130d157fe5b6000918252602080832090910154835282810193909352604091820190208151610200810183528154600160a060020a03168152600180830180548551601f60029483161561010002600019019092169390930490810187900487028301870190955284825291949293858401939192918301828280156131935780601f1061316857610100808354040283529160200191613193565b820191906000526020600020905b81548152906001019060200180831161317657829003601f168201915b5050509183525050600282810180546040805160206001841615610100026000190190931694909404601f810183900483028501830190915280845293810193908301828280156132255780601f106131fa57610100808354040283529160200191613225565b820191906000526020600020905b81548152906001019060200180831161320857829003601f168201915b505050918352505060038201805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529382019392918301828280156132b95780601f1061328e576101008083540402835291602001916132b9565b820191906000526020600020905b81548152906001019060200180831161329c57829003601f168201915b505050918352505060048201546020820152600582015460408201526006820154606082015260078201546080820152600882015460a0820152600982015460c09091019060ff16600181111561330c57fe5b600181111561331757fe5b8152600a820154602080830191909152600b8301546040830152600c8301546060830152600d8301546080830152600e83015460a0830152600f9092015460e060020a02600160e060020a03191660c09091015281015190915061337a90613ebe565b858381518110151561338857fe5b6020908102909101015261016081015184518590849081106133a657fe5b602090810290910101526101c081015183518490849081106133c457fe5b602090810290910101526001909101906130b6565b509297919650945092505050565b60085460006060815b8383101561367d576004600060088581548110151561340b57fe5b906000526020600020015460001916600019168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156135125760008481526020908190206040805160028681029093018054600181161561010002600019011693909304601f8101859004909402810160609081018352918101848152909384928491908401828280156134f05780601f106134c5576101008083540402835291602001916134f0565b820191906000526020600020905b8154815290600101906020018083116134d357829003601f168201915b505050505081526020016001820154815250508152602001906001019061344c565b505050509150600090505b8151811015613566576005600061354b848481518110151561353b57fe5b6020908102909101015151613df4565b8152602081019190915260400160009081205560010161351d565b6004600060088581548110151561357957fe5b60009182526020808320909101548352820192909252604001812061359d916141c7565b600360006008858154811015156135b057fe5b600091825260208083209091015483528201929092526040018120805473ffffffffffffffffffffffffffffffffffffffff19168155906135f46001830182614164565b613602600283016000614164565b613610600383016000614164565b506000600482018190556005820181905560068201819055600782018190556008820181905560098201805460ff19169055600a8201819055600b8201819055600c8201819055600d8201819055600e820155600f01805463ffffffff19169055600192909201916133f0565b600061368a60088261413b565b506009549350600092505b8383101561377d57600360006009858154811015156136b057fe5b600091825260208083209091015483528201929092526040018120805473ffffffffffffffffffffffffffffffffffffffff19168155906136f46001830182614164565b613702600283016000614164565b613710600383016000614164565b506000600482018190556005820181905560068201819055600782018190556008820181905560098201805460ff19169055600a8201819055600b8201819055600c8201819055600d8201819055600e820155600f01805463ffffffff1916905560019290920191613695565b600061378a60098261413b565b5050505050565b50565b7f90b31306678e0bff502a1577544c233c2cac3cc3696fe70577826fc77b105e008282604051808060200180602001838103835285818151815260200191508051906020019080838360005b838110156137f85781810151838201526020016137e0565b50505050905090810190601f1680156138255780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015613858578181015183820152602001613840565b50505050905090810190601f1680156138855780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a15050565b606060036000600a6138b560006001600a80549050036000613edd565b815481106138bf57fe5b9060005260206000200154600019166000191681526020019081526020016000206001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156139775780601f1061394c57610100808354040283529160200191613977565b820191906000526020600020905b81548152906001019060200180831161395a57829003601f168201915b5050505050905090565b60008060008060008061399388613df4565b6000818152600360205260408120600c81015492985096501080156139cb57506001600986015460ff1660018111156139c857fe5b14155b1515613a21576040805160e560020a62461bcd02815260206004820152601f60248201527f6e6f646520646f65736e2774206578697374206f722069732062616e6e656400604482015290519081900360640190fd5b846007015493508615613a5857610e108442031015613a4b57600885018054600019019055613a53565b600060088601555b613a95565b426007860155600885015415801590613a745750610e10844203105b15613a89576008850180546002029055613a95565b60088501805460010190555b600585600801541115613c1c575050506000838152600460205260408120805490915b81811015613b5d5760056000613b3d8584815481101515613ad557fe5b60009182526020918290206002918202018054604080516001831615610100026000190190921693909304601f8101859004850282018501909352828152929091908301828280156112fe5780601f106112d3576101008083540402835291602001916112fe565b815260208101919091526040016000208054600019019055600101613ab8565b6009858101805460ff191660019081179091558154600a8801819055908101825560009182527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0187905542600b8701556008860181905560068601556040805160208082526007908201527f42616e6e656421000000000000000000000000000000000000000000000000008183015290517f8374d399a7ca1b13cfc5d10c87699bb613f7f16a494fb5900a9062c28de428d6916060908290030190a15b5050505050505050565b60008060008060036000613c3987613df4565b81526020810191909152604001600020600681015460078201546008909201549097919650945092505050565b600060036000613c7586613df4565b81526020810191909152604001600020600c8101549091501515613ce3576040805160e560020a62461bcd02815260206004820152601260248201527f6e6f646520646f65736e27742065786973740000000000000000000000000000604482015290519081900360640190fd5b600d81018054830190819055600c8201541015613d4a576040805160e560020a62461bcd02815260206004820152601e60248201527f6e6f646520646f65736e2774206861766520656e6f7567682073706163650000604482015290519081900360640190fd5b600060056000613d5986613df4565b815260208101919091526040016000908120919091558054600101905550505050565b600060036000613d8b84613df4565b81526020810191909152604001600020600d015492915050565b60008060036000613db585613df4565b81526020810191909152604001600020600c8101549091501580613deb57506001600982015460ff166001811115613de957fe5b145b91505b50919050565b6000816040516020018082805190602001908083835b60208310613e295780518252601f199092019160209182019101613e0a565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310613e8c5780518252601f199092019160209182019101613e6d565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912095945050505050565b805160009082901515613ed45760009150613dee565b50506020015190565b60008084841015613f38576040805160e560020a62461bcd02815260206004820152601d60248201527f696e76616c696420617267756d656e747320746f2072616e646f6d2829000000604482015290519081900360640190fd5b60408051436020808301919091526c01000000000000000000000000330282840152605480830187905283518084039091018152607490920192839052815191929182918401908083835b60208310613fa25780518252601f199092019160209182019101613f83565b5181516000196020949094036101000a939093019283169219169190911790526040519201829003909120935050505084840360010181811515613fe257fe5b0685019150509392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061403057805160ff191683800117855561405d565b8280016001018555821561405d579182015b8281111561405d578251825591602001919060010190614042565b50612f859291506141e8565b60408051808201909152606081526000602082015290565b6080604051908101604052806004905b60608152602001906001900390816140915790505090565b610200604051908101604052806000600160a060020a0316815260200160608152602001606081526020016060815260200160008152602001600081526020016000815260200160008152602001600081526020016000600181111561410b57fe5b815260006020820181905260408201819052606082018190526080820181905260a0820181905260c09091015290565b81548183558181111561415f5760008381526020902061415f9181019083016141e8565b505050565b50805460018160011615610100020316600290046000825580601f1061418a5750613791565b601f01602090049060005260206000209081019061379191906141e8565b6080604051908101604052806004906020820280388339509192915050565b50805460008255600202906000526020600020908101906137919190614202565b61295091905b80821115612f8557600081556001016141ee565b61295091905b80821115612f8557600061421c8282614164565b50600060018201556002016142085600a165627a7a72305820702c9b47d422f16dee53ae5571ca298ba8e852d19e6d3e9e9a88d5edb419b46c0029`

// DeployCasper deploys a new Ethereum contract, binding an instance of Casper to it.
func DeployCasper(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Casper, error) {
	parsed, err := abi.JSON(strings.NewReader(CasperABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(CasperBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Casper{CasperCaller: CasperCaller{contract: contract}, CasperTransactor: CasperTransactor{contract: contract}, CasperFilterer: CasperFilterer{contract: contract}}, nil
}

// Casper is an auto generated Go binding around an Ethereum contract.
type Casper struct {
	CasperCaller     // Read-only binding to the contract
	CasperTransactor // Write-only binding to the contract
	CasperFilterer   // Log filterer for contract events
}

// CasperCaller is an auto generated read-only Go binding around an Ethereum contract.
type CasperCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CasperTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CasperTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CasperFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CasperFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CasperSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CasperSession struct {
	Contract     *Casper           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CasperCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CasperCallerSession struct {
	Contract *CasperCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// CasperTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CasperTransactorSession struct {
	Contract     *CasperTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CasperRaw is an auto generated low-level Go binding around an Ethereum contract.
type CasperRaw struct {
	Contract *Casper // Generic contract binding to access the raw methods on
}

// CasperCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CasperCallerRaw struct {
	Contract *CasperCaller // Generic read-only contract binding to access the raw methods on
}

// CasperTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CasperTransactorRaw struct {
	Contract *CasperTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCasper creates a new instance of Casper, bound to a specific deployed contract.
func NewCasper(address common.Address, backend bind.ContractBackend) (*Casper, error) {
	contract, err := bindCasper(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Casper{CasperCaller: CasperCaller{contract: contract}, CasperTransactor: CasperTransactor{contract: contract}, CasperFilterer: CasperFilterer{contract: contract}}, nil
}

// NewCasperCaller creates a new read-only instance of Casper, bound to a specific deployed contract.
func NewCasperCaller(address common.Address, caller bind.ContractCaller) (*CasperCaller, error) {
	contract, err := bindCasper(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CasperCaller{contract: contract}, nil
}

// NewCasperTransactor creates a new write-only instance of Casper, bound to a specific deployed contract.
func NewCasperTransactor(address common.Address, transactor bind.ContractTransactor) (*CasperTransactor, error) {
	contract, err := bindCasper(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CasperTransactor{contract: contract}, nil
}

// NewCasperFilterer creates a new log filterer instance of Casper, bound to a specific deployed contract.
func NewCasperFilterer(address common.Address, filterer bind.ContractFilterer) (*CasperFilterer, error) {
	contract, err := bindCasper(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CasperFilterer{contract: contract}, nil
}

// bindCasper binds a generic wrapper to an already deployed contract.
func bindCasper(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(CasperABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Casper *CasperRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Casper.Contract.CasperCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Casper *CasperRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Casper.Contract.CasperTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Casper *CasperRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Casper.Contract.CasperTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Casper *CasperCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Casper.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Casper *CasperTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Casper.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Casper *CasperTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Casper.Contract.contract.Transact(opts, method, params...)
}

// ConfirmTransfer is a free data retrieval call binding the contract method 0xbaa49301.
//
// Solidity: function confirmTransfer() constant returns()
func (_Casper *CasperCaller) ConfirmTransfer(opts *bind.CallOpts) error {
	var ()
	out := &[]interface{}{}
	err := _Casper.contract.Call(opts, out, "confirmTransfer")
	return err
}

// ConfirmTransfer is a free data retrieval call binding the contract method 0xbaa49301.
//
// Solidity: function confirmTransfer() constant returns()
func (_Casper *CasperSession) ConfirmTransfer() error {
	return _Casper.Contract.ConfirmTransfer(&_Casper.CallOpts)
}

// ConfirmTransfer is a free data retrieval call binding the contract method 0xbaa49301.
//
// Solidity: function confirmTransfer() constant returns()
func (_Casper *CasperCallerSession) ConfirmTransfer() error {
	return _Casper.Contract.ConfirmTransfer(&_Casper.CallOpts)
}

// GetAllPeers is a free data retrieval call binding the contract method 0x2d62b810.
//
// Solidity: function getAllPeers() constant returns(bytes32[], uint256[], bytes32[], bytes4[])
func (_Casper *CasperCaller) GetAllPeers(opts *bind.CallOpts) ([][32]byte, []*big.Int, [][32]byte, [][4]byte, error) {
	var (
		ret0 = new([][32]byte)
		ret1 = new([]*big.Int)
		ret2 = new([][32]byte)
		ret3 = new([][4]byte)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
		ret3,
	}
	err := _Casper.contract.Call(opts, out, "getAllPeers")
	return *ret0, *ret1, *ret2, *ret3, err
}

// GetAllPeers is a free data retrieval call binding the contract method 0x2d62b810.
//
// Solidity: function getAllPeers() constant returns(bytes32[], uint256[], bytes32[], bytes4[])
func (_Casper *CasperSession) GetAllPeers() ([][32]byte, []*big.Int, [][32]byte, [][4]byte, error) {
	return _Casper.Contract.GetAllPeers(&_Casper.CallOpts)
}

// GetAllPeers is a free data retrieval call binding the contract method 0x2d62b810.
//
// Solidity: function getAllPeers() constant returns(bytes32[], uint256[], bytes32[], bytes4[])
func (_Casper *CasperCallerSession) GetAllPeers() ([][32]byte, []*big.Int, [][32]byte, [][4]byte, error) {
	return _Casper.Contract.GetAllPeers(&_Casper.CallOpts)
}

// GetBanStats is a free data retrieval call binding the contract method 0xdf4b5f83.
//
// Solidity: function getBanStats(nodeID string) constant returns(uint256, uint256, uint256)
func (_Casper *CasperCaller) GetBanStats(opts *bind.CallOpts, nodeID string) (*big.Int, *big.Int, *big.Int, error) {
	var (
		ret0 = new(*big.Int)
		ret1 = new(*big.Int)
		ret2 = new(*big.Int)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
	}
	err := _Casper.contract.Call(opts, out, "getBanStats", nodeID)
	return *ret0, *ret1, *ret2, err
}

// GetBanStats is a free data retrieval call binding the contract method 0xdf4b5f83.
//
// Solidity: function getBanStats(nodeID string) constant returns(uint256, uint256, uint256)
func (_Casper *CasperSession) GetBanStats(nodeID string) (*big.Int, *big.Int, *big.Int, error) {
	return _Casper.Contract.GetBanStats(&_Casper.CallOpts, nodeID)
}

// GetBanStats is a free data retrieval call binding the contract method 0xdf4b5f83.
//
// Solidity: function getBanStats(nodeID string) constant returns(uint256, uint256, uint256)
func (_Casper *CasperCallerSession) GetBanStats(nodeID string) (*big.Int, *big.Int, *big.Int, error) {
	return _Casper.Contract.GetBanStats(&_Casper.CallOpts, nodeID)
}

// GetBannedPeers is a free data retrieval call binding the contract method 0xc0842728.
//
// Solidity: function getBannedPeers() constant returns(bytes32[], uint256[], bytes32[])
func (_Casper *CasperCaller) GetBannedPeers(opts *bind.CallOpts) ([][32]byte, []*big.Int, [][32]byte, error) {
	var (
		ret0 = new([][32]byte)
		ret1 = new([]*big.Int)
		ret2 = new([][32]byte)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
	}
	err := _Casper.contract.Call(opts, out, "getBannedPeers")
	return *ret0, *ret1, *ret2, err
}

// GetBannedPeers is a free data retrieval call binding the contract method 0xc0842728.
//
// Solidity: function getBannedPeers() constant returns(bytes32[], uint256[], bytes32[])
func (_Casper *CasperSession) GetBannedPeers() ([][32]byte, []*big.Int, [][32]byte, error) {
	return _Casper.Contract.GetBannedPeers(&_Casper.CallOpts)
}

// GetBannedPeers is a free data retrieval call binding the contract method 0xc0842728.
//
// Solidity: function getBannedPeers() constant returns(bytes32[], uint256[], bytes32[])
func (_Casper *CasperCallerSession) GetBannedPeers() ([][32]byte, []*big.Int, [][32]byte, error) {
	return _Casper.Contract.GetBannedPeers(&_Casper.CallOpts)
}

// GetBlockTime is a free data retrieval call binding the contract method 0x87ceff09.
//
// Solidity: function getBlockTime() constant returns(timestamp uint256)
func (_Casper *CasperCaller) GetBlockTime(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Casper.contract.Call(opts, out, "getBlockTime")
	return *ret0, err
}

// GetBlockTime is a free data retrieval call binding the contract method 0x87ceff09.
//
// Solidity: function getBlockTime() constant returns(timestamp uint256)
func (_Casper *CasperSession) GetBlockTime() (*big.Int, error) {
	return _Casper.Contract.GetBlockTime(&_Casper.CallOpts)
}

// GetBlockTime is a free data retrieval call binding the contract method 0x87ceff09.
//
// Solidity: function getBlockTime() constant returns(timestamp uint256)
func (_Casper *CasperCallerSession) GetBlockTime() (*big.Int, error) {
	return _Casper.Contract.GetBlockTime(&_Casper.CallOpts)
}

// GetBootstrap is a free data retrieval call binding the contract method 0xd9290af9.
//
// Solidity: function getBootstrap() constant returns(id string)
func (_Casper *CasperCaller) GetBootstrap(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _Casper.contract.Call(opts, out, "getBootstrap")
	return *ret0, err
}

// GetBootstrap is a free data retrieval call binding the contract method 0xd9290af9.
//
// Solidity: function getBootstrap() constant returns(id string)
func (_Casper *CasperSession) GetBootstrap() (string, error) {
	return _Casper.Contract.GetBootstrap(&_Casper.CallOpts)
}

// GetBootstrap is a free data retrieval call binding the contract method 0xd9290af9.
//
// Solidity: function getBootstrap() constant returns(id string)
func (_Casper *CasperCallerSession) GetBootstrap() (string, error) {
	return _Casper.Contract.GetBootstrap(&_Casper.CallOpts)
}

// GetFile is a free data retrieval call binding the contract method 0x6cf0d392.
//
// Solidity: function getFile(nodeID string, n uint256) constant returns(string, uint256)
func (_Casper *CasperCaller) GetFile(opts *bind.CallOpts, nodeID string, n *big.Int) (string, *big.Int, error) {
	var (
		ret0 = new(string)
		ret1 = new(*big.Int)
	)
	out := &[]interface{}{
		ret0,
		ret1,
	}
	err := _Casper.contract.Call(opts, out, "getFile", nodeID, n)
	return *ret0, *ret1, err
}

// GetFile is a free data retrieval call binding the contract method 0x6cf0d392.
//
// Solidity: function getFile(nodeID string, n uint256) constant returns(string, uint256)
func (_Casper *CasperSession) GetFile(nodeID string, n *big.Int) (string, *big.Int, error) {
	return _Casper.Contract.GetFile(&_Casper.CallOpts, nodeID, n)
}

// GetFile is a free data retrieval call binding the contract method 0x6cf0d392.
//
// Solidity: function getFile(nodeID string, n uint256) constant returns(string, uint256)
func (_Casper *CasperCallerSession) GetFile(nodeID string, n *big.Int) (string, *big.Int, error) {
	return _Casper.Contract.GetFile(&_Casper.CallOpts, nodeID, n)
}

// GetNodeAddr is a free data retrieval call binding the contract method 0xab40eaa8.
//
// Solidity: function getNodeAddr(nodeID string) constant returns(string, string)
func (_Casper *CasperCaller) GetNodeAddr(opts *bind.CallOpts, nodeID string) (string, string, error) {
	var (
		ret0 = new(string)
		ret1 = new(string)
	)
	out := &[]interface{}{
		ret0,
		ret1,
	}
	err := _Casper.contract.Call(opts, out, "getNodeAddr", nodeID)
	return *ret0, *ret1, err
}

// GetNodeAddr is a free data retrieval call binding the contract method 0xab40eaa8.
//
// Solidity: function getNodeAddr(nodeID string) constant returns(string, string)
func (_Casper *CasperSession) GetNodeAddr(nodeID string) (string, string, error) {
	return _Casper.Contract.GetNodeAddr(&_Casper.CallOpts, nodeID)
}

// GetNodeAddr is a free data retrieval call binding the contract method 0xab40eaa8.
//
// Solidity: function getNodeAddr(nodeID string) constant returns(string, string)
func (_Casper *CasperCallerSession) GetNodeAddr(nodeID string) (string, string, error) {
	return _Casper.Contract.GetNodeAddr(&_Casper.CallOpts, nodeID)
}

// GetNumberOfFiles is a free data retrieval call binding the contract method 0xafffcb9d.
//
// Solidity: function getNumberOfFiles(nodeID string) constant returns(uint256)
func (_Casper *CasperCaller) GetNumberOfFiles(opts *bind.CallOpts, nodeID string) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Casper.contract.Call(opts, out, "getNumberOfFiles", nodeID)
	return *ret0, err
}

// GetNumberOfFiles is a free data retrieval call binding the contract method 0xafffcb9d.
//
// Solidity: function getNumberOfFiles(nodeID string) constant returns(uint256)
func (_Casper *CasperSession) GetNumberOfFiles(nodeID string) (*big.Int, error) {
	return _Casper.Contract.GetNumberOfFiles(&_Casper.CallOpts, nodeID)
}

// GetNumberOfFiles is a free data retrieval call binding the contract method 0xafffcb9d.
//
// Solidity: function getNumberOfFiles(nodeID string) constant returns(uint256)
func (_Casper *CasperCallerSession) GetNumberOfFiles(nodeID string) (*big.Int, error) {
	return _Casper.Contract.GetNumberOfFiles(&_Casper.CallOpts, nodeID)
}

// GetPeers is a free data retrieval call binding the contract method 0x776b0f04.
//
// Solidity: function getPeers(size uint256, seed uint256) constant returns(string, string, string, string)
func (_Casper *CasperCaller) GetPeers(opts *bind.CallOpts, size *big.Int, seed *big.Int) (string, string, string, string, error) {
	var (
		ret0 = new(string)
		ret1 = new(string)
		ret2 = new(string)
		ret3 = new(string)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
		ret3,
	}
	err := _Casper.contract.Call(opts, out, "getPeers", size, seed)
	return *ret0, *ret1, *ret2, *ret3, err
}

// GetPeers is a free data retrieval call binding the contract method 0x776b0f04.
//
// Solidity: function getPeers(size uint256, seed uint256) constant returns(string, string, string, string)
func (_Casper *CasperSession) GetPeers(size *big.Int, seed *big.Int) (string, string, string, string, error) {
	return _Casper.Contract.GetPeers(&_Casper.CallOpts, size, seed)
}

// GetPeers is a free data retrieval call binding the contract method 0x776b0f04.
//
// Solidity: function getPeers(size uint256, seed uint256) constant returns(string, string, string, string)
func (_Casper *CasperCallerSession) GetPeers(size *big.Int, seed *big.Int) (string, string, string, string, error) {
	return _Casper.Contract.GetPeers(&_Casper.CallOpts, size, seed)
}

// GetPingTarget is a free data retrieval call binding the contract method 0xafeb7c59.
//
// Solidity: function getPingTarget() constant returns(string)
func (_Casper *CasperCaller) GetPingTarget(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _Casper.contract.Call(opts, out, "getPingTarget")
	return *ret0, err
}

// GetPingTarget is a free data retrieval call binding the contract method 0xafeb7c59.
//
// Solidity: function getPingTarget() constant returns(string)
func (_Casper *CasperSession) GetPingTarget() (string, error) {
	return _Casper.Contract.GetPingTarget(&_Casper.CallOpts)
}

// GetPingTarget is a free data retrieval call binding the contract method 0xafeb7c59.
//
// Solidity: function getPingTarget() constant returns(string)
func (_Casper *CasperCallerSession) GetPingTarget() (string, error) {
	return _Casper.Contract.GetPingTarget(&_Casper.CallOpts)
}

// GetStoringPeers is a free data retrieval call binding the contract method 0x63f17cda.
//
// Solidity: function getStoringPeers(fileID string) constant returns(uint256)
func (_Casper *CasperCaller) GetStoringPeers(opts *bind.CallOpts, fileID string) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Casper.contract.Call(opts, out, "getStoringPeers", fileID)
	return *ret0, err
}

// GetStoringPeers is a free data retrieval call binding the contract method 0x63f17cda.
//
// Solidity: function getStoringPeers(fileID string) constant returns(uint256)
func (_Casper *CasperSession) GetStoringPeers(fileID string) (*big.Int, error) {
	return _Casper.Contract.GetStoringPeers(&_Casper.CallOpts, fileID)
}

// GetStoringPeers is a free data retrieval call binding the contract method 0x63f17cda.
//
// Solidity: function getStoringPeers(fileID string) constant returns(uint256)
func (_Casper *CasperCallerSession) GetStoringPeers(fileID string) (*big.Int, error) {
	return _Casper.Contract.GetStoringPeers(&_Casper.CallOpts, fileID)
}

// GetSystemState is a free data retrieval call binding the contract method 0x28fa777f.
//
// Solidity: function getSystemState() constant returns(uint256, uint256, uint256, uint256, uint256)
func (_Casper *CasperCaller) GetSystemState(opts *bind.CallOpts) (*big.Int, *big.Int, *big.Int, *big.Int, *big.Int, error) {
	var (
		ret0 = new(*big.Int)
		ret1 = new(*big.Int)
		ret2 = new(*big.Int)
		ret3 = new(*big.Int)
		ret4 = new(*big.Int)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
		ret3,
		ret4,
	}
	err := _Casper.contract.Call(opts, out, "getSystemState")
	return *ret0, *ret1, *ret2, *ret3, *ret4, err
}

// GetSystemState is a free data retrieval call binding the contract method 0x28fa777f.
//
// Solidity: function getSystemState() constant returns(uint256, uint256, uint256, uint256, uint256)
func (_Casper *CasperSession) GetSystemState() (*big.Int, *big.Int, *big.Int, *big.Int, *big.Int, error) {
	return _Casper.Contract.GetSystemState(&_Casper.CallOpts)
}

// GetSystemState is a free data retrieval call binding the contract method 0x28fa777f.
//
// Solidity: function getSystemState() constant returns(uint256, uint256, uint256, uint256, uint256)
func (_Casper *CasperCallerSession) GetSystemState() (*big.Int, *big.Int, *big.Int, *big.Int, *big.Int, error) {
	return _Casper.Contract.GetSystemState(&_Casper.CallOpts)
}

// IsDead is a free data retrieval call binding the contract method 0xfdf9f27d.
//
// Solidity: function isDead(nodeID string) constant returns(bool)
func (_Casper *CasperCaller) IsDead(opts *bind.CallOpts, nodeID string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Casper.contract.Call(opts, out, "isDead", nodeID)
	return *ret0, err
}

// IsDead is a free data retrieval call binding the contract method 0xfdf9f27d.
//
// Solidity: function isDead(nodeID string) constant returns(bool)
func (_Casper *CasperSession) IsDead(nodeID string) (bool, error) {
	return _Casper.Contract.IsDead(&_Casper.CallOpts, nodeID)
}

// IsDead is a free data retrieval call binding the contract method 0xfdf9f27d.
//
// Solidity: function isDead(nodeID string) constant returns(bool)
func (_Casper *CasperCallerSession) IsDead(nodeID string) (bool, error) {
	return _Casper.Contract.IsDead(&_Casper.CallOpts, nodeID)
}

// IsPrepaid is a free data retrieval call binding the contract method 0x73e07e14.
//
// Solidity: function isPrepaid(client address) constant returns(bool)
func (_Casper *CasperCaller) IsPrepaid(opts *bind.CallOpts, client common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Casper.contract.Call(opts, out, "isPrepaid", client)
	return *ret0, err
}

// IsPrepaid is a free data retrieval call binding the contract method 0x73e07e14.
//
// Solidity: function isPrepaid(client address) constant returns(bool)
func (_Casper *CasperSession) IsPrepaid(client common.Address) (bool, error) {
	return _Casper.Contract.IsPrepaid(&_Casper.CallOpts, client)
}

// IsPrepaid is a free data retrieval call binding the contract method 0x73e07e14.
//
// Solidity: function isPrepaid(client address) constant returns(bool)
func (_Casper *CasperCallerSession) IsPrepaid(client common.Address) (bool, error) {
	return _Casper.Contract.IsPrepaid(&_Casper.CallOpts, client)
}

// MachineInformation is a free data retrieval call binding the contract method 0xf8c5df33.
//
// Solidity: function machineInformation(nodeID string) constant returns(uint256)
func (_Casper *CasperCaller) MachineInformation(opts *bind.CallOpts, nodeID string) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Casper.contract.Call(opts, out, "machineInformation", nodeID)
	return *ret0, err
}

// MachineInformation is a free data retrieval call binding the contract method 0xf8c5df33.
//
// Solidity: function machineInformation(nodeID string) constant returns(uint256)
func (_Casper *CasperSession) MachineInformation(nodeID string) (*big.Int, error) {
	return _Casper.Contract.MachineInformation(&_Casper.CallOpts, nodeID)
}

// MachineInformation is a free data retrieval call binding the contract method 0xf8c5df33.
//
// Solidity: function machineInformation(nodeID string) constant returns(uint256)
func (_Casper *CasperCallerSession) MachineInformation(nodeID string) (*big.Int, error) {
	return _Casper.Contract.MachineInformation(&_Casper.CallOpts, nodeID)
}

// NotifyDelete is a free data retrieval call binding the contract method 0xc72f7c54.
//
// Solidity: function notifyDelete( uint128) constant returns()
func (_Casper *CasperCaller) NotifyDelete(opts *bind.CallOpts, arg0 *big.Int) error {
	var ()
	out := &[]interface{}{}
	err := _Casper.contract.Call(opts, out, "notifyDelete", arg0)
	return err
}

// NotifyDelete is a free data retrieval call binding the contract method 0xc72f7c54.
//
// Solidity: function notifyDelete( uint128) constant returns()
func (_Casper *CasperSession) NotifyDelete(arg0 *big.Int) error {
	return _Casper.Contract.NotifyDelete(&_Casper.CallOpts, arg0)
}

// NotifyDelete is a free data retrieval call binding the contract method 0xc72f7c54.
//
// Solidity: function notifyDelete( uint128) constant returns()
func (_Casper *CasperCallerSession) NotifyDelete(arg0 *big.Int) error {
	return _Casper.Contract.NotifyDelete(&_Casper.CallOpts, arg0)
}

// ShowStoringPeers is a free data retrieval call binding the contract method 0x205211b6.
//
// Solidity: function showStoringPeers(fileID string) constant returns(string, string, string, string)
func (_Casper *CasperCaller) ShowStoringPeers(opts *bind.CallOpts, fileID string) (string, string, string, string, error) {
	var (
		ret0 = new(string)
		ret1 = new(string)
		ret2 = new(string)
		ret3 = new(string)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
		ret3,
	}
	err := _Casper.contract.Call(opts, out, "showStoringPeers", fileID)
	return *ret0, *ret1, *ret2, *ret3, err
}

// ShowStoringPeers is a free data retrieval call binding the contract method 0x205211b6.
//
// Solidity: function showStoringPeers(fileID string) constant returns(string, string, string, string)
func (_Casper *CasperSession) ShowStoringPeers(fileID string) (string, string, string, string, error) {
	return _Casper.Contract.ShowStoringPeers(&_Casper.CallOpts, fileID)
}

// ShowStoringPeers is a free data retrieval call binding the contract method 0x205211b6.
//
// Solidity: function showStoringPeers(fileID string) constant returns(string, string, string, string)
func (_Casper *CasperCallerSession) ShowStoringPeers(fileID string) (string, string, string, string, error) {
	return _Casper.Contract.ShowStoringPeers(&_Casper.CallOpts, fileID)
}

// AddToken is a paid mutator transaction binding the contract method 0x179d375c.
//
// Solidity: function addToken(amount uint256) returns()
func (_Casper *CasperTransactor) AddToken(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Casper.contract.Transact(opts, "addToken", amount)
}

// AddToken is a paid mutator transaction binding the contract method 0x179d375c.
//
// Solidity: function addToken(amount uint256) returns()
func (_Casper *CasperSession) AddToken(amount *big.Int) (*types.Transaction, error) {
	return _Casper.Contract.AddToken(&_Casper.TransactOpts, amount)
}

// AddToken is a paid mutator transaction binding the contract method 0x179d375c.
//
// Solidity: function addToken(amount uint256) returns()
func (_Casper *CasperTransactorSession) AddToken(amount *big.Int) (*types.Transaction, error) {
	return _Casper.Contract.AddToken(&_Casper.TransactOpts, amount)
}

// CheckVerification is a paid mutator transaction binding the contract method 0x9e32cf92.
//
// Solidity: function checkVerification(fileID string, consensus bool[16], nodeIds bytes32[4]) returns()
func (_Casper *CasperTransactor) CheckVerification(opts *bind.TransactOpts, fileID string, consensus [16]bool, nodeIds [4][32]byte) (*types.Transaction, error) {
	return _Casper.contract.Transact(opts, "checkVerification", fileID, consensus, nodeIds)
}

// CheckVerification is a paid mutator transaction binding the contract method 0x9e32cf92.
//
// Solidity: function checkVerification(fileID string, consensus bool[16], nodeIds bytes32[4]) returns()
func (_Casper *CasperSession) CheckVerification(fileID string, consensus [16]bool, nodeIds [4][32]byte) (*types.Transaction, error) {
	return _Casper.Contract.CheckVerification(&_Casper.TransactOpts, fileID, consensus, nodeIds)
}

// CheckVerification is a paid mutator transaction binding the contract method 0x9e32cf92.
//
// Solidity: function checkVerification(fileID string, consensus bool[16], nodeIds bytes32[4]) returns()
func (_Casper *CasperTransactorSession) CheckVerification(fileID string, consensus [16]bool, nodeIds [4][32]byte) (*types.Transaction, error) {
	return _Casper.Contract.CheckVerification(&_Casper.TransactOpts, fileID, consensus, nodeIds)
}

// ClearPrepay is a paid mutator transaction binding the contract method 0x6e2e1887.
//
// Solidity: function clearPrepay() returns()
func (_Casper *CasperTransactor) ClearPrepay(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Casper.contract.Transact(opts, "clearPrepay")
}

// ClearPrepay is a paid mutator transaction binding the contract method 0x6e2e1887.
//
// Solidity: function clearPrepay() returns()
func (_Casper *CasperSession) ClearPrepay() (*types.Transaction, error) {
	return _Casper.Contract.ClearPrepay(&_Casper.TransactOpts)
}

// ClearPrepay is a paid mutator transaction binding the contract method 0x6e2e1887.
//
// Solidity: function clearPrepay() returns()
func (_Casper *CasperTransactorSession) ClearPrepay() (*types.Transaction, error) {
	return _Casper.Contract.ClearPrepay(&_Casper.TransactOpts)
}

// ConfirmDownload is a paid mutator transaction binding the contract method 0x28748e91.
//
// Solidity: function confirmDownload() returns()
func (_Casper *CasperTransactor) ConfirmDownload(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Casper.contract.Transact(opts, "confirmDownload")
}

// ConfirmDownload is a paid mutator transaction binding the contract method 0x28748e91.
//
// Solidity: function confirmDownload() returns()
func (_Casper *CasperSession) ConfirmDownload() (*types.Transaction, error) {
	return _Casper.Contract.ConfirmDownload(&_Casper.TransactOpts)
}

// ConfirmDownload is a paid mutator transaction binding the contract method 0x28748e91.
//
// Solidity: function confirmDownload() returns()
func (_Casper *CasperTransactorSession) ConfirmDownload() (*types.Transaction, error) {
	return _Casper.Contract.ConfirmDownload(&_Casper.TransactOpts)
}

// ConfirmUpdate is a paid mutator transaction binding the contract method 0x5a44a117.
//
// Solidity: function confirmUpdate(nodeID string, fileID string, size uint256) returns()
func (_Casper *CasperTransactor) ConfirmUpdate(opts *bind.TransactOpts, nodeID string, fileID string, size *big.Int) (*types.Transaction, error) {
	return _Casper.contract.Transact(opts, "confirmUpdate", nodeID, fileID, size)
}

// ConfirmUpdate is a paid mutator transaction binding the contract method 0x5a44a117.
//
// Solidity: function confirmUpdate(nodeID string, fileID string, size uint256) returns()
func (_Casper *CasperSession) ConfirmUpdate(nodeID string, fileID string, size *big.Int) (*types.Transaction, error) {
	return _Casper.Contract.ConfirmUpdate(&_Casper.TransactOpts, nodeID, fileID, size)
}

// ConfirmUpdate is a paid mutator transaction binding the contract method 0x5a44a117.
//
// Solidity: function confirmUpdate(nodeID string, fileID string, size uint256) returns()
func (_Casper *CasperTransactorSession) ConfirmUpdate(nodeID string, fileID string, size *big.Int) (*types.Transaction, error) {
	return _Casper.Contract.ConfirmUpdate(&_Casper.TransactOpts, nodeID, fileID, size)
}

// ConfirmUpload is a paid mutator transaction binding the contract method 0x09f1179b.
//
// Solidity: function confirmUpload(nodeID string, fileID string, size uint256) returns()
func (_Casper *CasperTransactor) ConfirmUpload(opts *bind.TransactOpts, nodeID string, fileID string, size *big.Int) (*types.Transaction, error) {
	return _Casper.contract.Transact(opts, "confirmUpload", nodeID, fileID, size)
}

// ConfirmUpload is a paid mutator transaction binding the contract method 0x09f1179b.
//
// Solidity: function confirmUpload(nodeID string, fileID string, size uint256) returns()
func (_Casper *CasperSession) ConfirmUpload(nodeID string, fileID string, size *big.Int) (*types.Transaction, error) {
	return _Casper.Contract.ConfirmUpload(&_Casper.TransactOpts, nodeID, fileID, size)
}

// ConfirmUpload is a paid mutator transaction binding the contract method 0x09f1179b.
//
// Solidity: function confirmUpload(nodeID string, fileID string, size uint256) returns()
func (_Casper *CasperTransactorSession) ConfirmUpload(nodeID string, fileID string, size *big.Int) (*types.Transaction, error) {
	return _Casper.Contract.ConfirmUpload(&_Casper.TransactOpts, nodeID, fileID, size)
}

// NotifySpaceFreed is a paid mutator transaction binding the contract method 0xed0e4f82.
//
// Solidity: function notifySpaceFreed(nodeID string, fileID string, size uint256) returns()
func (_Casper *CasperTransactor) NotifySpaceFreed(opts *bind.TransactOpts, nodeID string, fileID string, size *big.Int) (*types.Transaction, error) {
	return _Casper.contract.Transact(opts, "notifySpaceFreed", nodeID, fileID, size)
}

// NotifySpaceFreed is a paid mutator transaction binding the contract method 0xed0e4f82.
//
// Solidity: function notifySpaceFreed(nodeID string, fileID string, size uint256) returns()
func (_Casper *CasperSession) NotifySpaceFreed(nodeID string, fileID string, size *big.Int) (*types.Transaction, error) {
	return _Casper.Contract.NotifySpaceFreed(&_Casper.TransactOpts, nodeID, fileID, size)
}

// NotifySpaceFreed is a paid mutator transaction binding the contract method 0xed0e4f82.
//
// Solidity: function notifySpaceFreed(nodeID string, fileID string, size uint256) returns()
func (_Casper *CasperTransactorSession) NotifySpaceFreed(nodeID string, fileID string, size *big.Int) (*types.Transaction, error) {
	return _Casper.Contract.NotifySpaceFreed(&_Casper.TransactOpts, nodeID, fileID, size)
}

// NotifyVerificationTarget is a paid mutator transaction binding the contract method 0xd5109c86.
//
// Solidity: function notifyVerificationTarget(fileID string, nodeID string) returns()
func (_Casper *CasperTransactor) NotifyVerificationTarget(opts *bind.TransactOpts, fileID string, nodeID string) (*types.Transaction, error) {
	return _Casper.contract.Transact(opts, "notifyVerificationTarget", fileID, nodeID)
}

// NotifyVerificationTarget is a paid mutator transaction binding the contract method 0xd5109c86.
//
// Solidity: function notifyVerificationTarget(fileID string, nodeID string) returns()
func (_Casper *CasperSession) NotifyVerificationTarget(fileID string, nodeID string) (*types.Transaction, error) {
	return _Casper.Contract.NotifyVerificationTarget(&_Casper.TransactOpts, fileID, nodeID)
}

// NotifyVerificationTarget is a paid mutator transaction binding the contract method 0xd5109c86.
//
// Solidity: function notifyVerificationTarget(fileID string, nodeID string) returns()
func (_Casper *CasperTransactorSession) NotifyVerificationTarget(fileID string, nodeID string) (*types.Transaction, error) {
	return _Casper.Contract.NotifyVerificationTarget(&_Casper.TransactOpts, fileID, nodeID)
}

// PrePay is a paid mutator transaction binding the contract method 0xaac80f47.
//
// Solidity: function prePay(pay uint256) returns()
func (_Casper *CasperTransactor) PrePay(opts *bind.TransactOpts, pay *big.Int) (*types.Transaction, error) {
	return _Casper.contract.Transact(opts, "prePay", pay)
}

// PrePay is a paid mutator transaction binding the contract method 0xaac80f47.
//
// Solidity: function prePay(pay uint256) returns()
func (_Casper *CasperSession) PrePay(pay *big.Int) (*types.Transaction, error) {
	return _Casper.Contract.PrePay(&_Casper.TransactOpts, pay)
}

// PrePay is a paid mutator transaction binding the contract method 0xaac80f47.
//
// Solidity: function prePay(pay uint256) returns()
func (_Casper *CasperTransactorSession) PrePay(pay *big.Int) (*types.Transaction, error) {
	return _Casper.Contract.PrePay(&_Casper.TransactOpts, pay)
}

// RegisterProvider is a paid mutator transaction binding the contract method 0x4d474b99.
//
// Solidity: function registerProvider(nodeID string, telegram bytes32, apiAddr string, rpcAddr string, size uint256) returns()
func (_Casper *CasperTransactor) RegisterProvider(opts *bind.TransactOpts, nodeID string, telegram [32]byte, apiAddr string, rpcAddr string, size *big.Int) (*types.Transaction, error) {
	return _Casper.contract.Transact(opts, "registerProvider", nodeID, telegram, apiAddr, rpcAddr, size)
}

// RegisterProvider is a paid mutator transaction binding the contract method 0x4d474b99.
//
// Solidity: function registerProvider(nodeID string, telegram bytes32, apiAddr string, rpcAddr string, size uint256) returns()
func (_Casper *CasperSession) RegisterProvider(nodeID string, telegram [32]byte, apiAddr string, rpcAddr string, size *big.Int) (*types.Transaction, error) {
	return _Casper.Contract.RegisterProvider(&_Casper.TransactOpts, nodeID, telegram, apiAddr, rpcAddr, size)
}

// RegisterProvider is a paid mutator transaction binding the contract method 0x4d474b99.
//
// Solidity: function registerProvider(nodeID string, telegram bytes32, apiAddr string, rpcAddr string, size uint256) returns()
func (_Casper *CasperTransactorSession) RegisterProvider(nodeID string, telegram [32]byte, apiAddr string, rpcAddr string, size *big.Int) (*types.Transaction, error) {
	return _Casper.Contract.RegisterProvider(&_Casper.TransactOpts, nodeID, telegram, apiAddr, rpcAddr, size)
}

// RemoveAllPeers is a paid mutator transaction binding the contract method 0xc13aaeaf.
//
// Solidity: function removeAllPeers() returns()
func (_Casper *CasperTransactor) RemoveAllPeers(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Casper.contract.Transact(opts, "removeAllPeers")
}

// RemoveAllPeers is a paid mutator transaction binding the contract method 0xc13aaeaf.
//
// Solidity: function removeAllPeers() returns()
func (_Casper *CasperSession) RemoveAllPeers() (*types.Transaction, error) {
	return _Casper.Contract.RemoveAllPeers(&_Casper.TransactOpts)
}

// RemoveAllPeers is a paid mutator transaction binding the contract method 0xc13aaeaf.
//
// Solidity: function removeAllPeers() returns()
func (_Casper *CasperTransactorSession) RemoveAllPeers() (*types.Transaction, error) {
	return _Casper.Contract.RemoveAllPeers(&_Casper.TransactOpts)
}

// RemoveProviderMachine is a paid mutator transaction binding the contract method 0x5107e4ee.
//
// Solidity: function removeProviderMachine(nodeID string) returns()
func (_Casper *CasperTransactor) RemoveProviderMachine(opts *bind.TransactOpts, nodeID string) (*types.Transaction, error) {
	return _Casper.contract.Transact(opts, "removeProviderMachine", nodeID)
}

// RemoveProviderMachine is a paid mutator transaction binding the contract method 0x5107e4ee.
//
// Solidity: function removeProviderMachine(nodeID string) returns()
func (_Casper *CasperSession) RemoveProviderMachine(nodeID string) (*types.Transaction, error) {
	return _Casper.Contract.RemoveProviderMachine(&_Casper.TransactOpts, nodeID)
}

// RemoveProviderMachine is a paid mutator transaction binding the contract method 0x5107e4ee.
//
// Solidity: function removeProviderMachine(nodeID string) returns()
func (_Casper *CasperTransactorSession) RemoveProviderMachine(nodeID string) (*types.Transaction, error) {
	return _Casper.Contract.RemoveProviderMachine(&_Casper.TransactOpts, nodeID)
}

// SendPingResult is a paid mutator transaction binding the contract method 0xdc3dd578.
//
// Solidity: function sendPingResult(nodeID string, success bool) returns()
func (_Casper *CasperTransactor) SendPingResult(opts *bind.TransactOpts, nodeID string, success bool) (*types.Transaction, error) {
	return _Casper.contract.Transact(opts, "sendPingResult", nodeID, success)
}

// SendPingResult is a paid mutator transaction binding the contract method 0xdc3dd578.
//
// Solidity: function sendPingResult(nodeID string, success bool) returns()
func (_Casper *CasperSession) SendPingResult(nodeID string, success bool) (*types.Transaction, error) {
	return _Casper.Contract.SendPingResult(&_Casper.TransactOpts, nodeID, success)
}

// SendPingResult is a paid mutator transaction binding the contract method 0xdc3dd578.
//
// Solidity: function sendPingResult(nodeID string, success bool) returns()
func (_Casper *CasperTransactorSession) SendPingResult(nodeID string, success bool) (*types.Transaction, error) {
	return _Casper.Contract.SendPingResult(&_Casper.TransactOpts, nodeID, success)
}

// SetAPIAddr is a paid mutator transaction binding the contract method 0x02d87d46.
//
// Solidity: function setAPIAddr(nodeID string, addr string) returns()
func (_Casper *CasperTransactor) SetAPIAddr(opts *bind.TransactOpts, nodeID string, addr string) (*types.Transaction, error) {
	return _Casper.contract.Transact(opts, "setAPIAddr", nodeID, addr)
}

// SetAPIAddr is a paid mutator transaction binding the contract method 0x02d87d46.
//
// Solidity: function setAPIAddr(nodeID string, addr string) returns()
func (_Casper *CasperSession) SetAPIAddr(nodeID string, addr string) (*types.Transaction, error) {
	return _Casper.Contract.SetAPIAddr(&_Casper.TransactOpts, nodeID, addr)
}

// SetAPIAddr is a paid mutator transaction binding the contract method 0x02d87d46.
//
// Solidity: function setAPIAddr(nodeID string, addr string) returns()
func (_Casper *CasperTransactorSession) SetAPIAddr(nodeID string, addr string) (*types.Transaction, error) {
	return _Casper.Contract.SetAPIAddr(&_Casper.TransactOpts, nodeID, addr)
}

// SetBootstrap is a paid mutator transaction binding the contract method 0xa746dadb.
//
// Solidity: function setBootstrap(id string) returns()
func (_Casper *CasperTransactor) SetBootstrap(opts *bind.TransactOpts, id string) (*types.Transaction, error) {
	return _Casper.contract.Transact(opts, "setBootstrap", id)
}

// SetBootstrap is a paid mutator transaction binding the contract method 0xa746dadb.
//
// Solidity: function setBootstrap(id string) returns()
func (_Casper *CasperSession) SetBootstrap(id string) (*types.Transaction, error) {
	return _Casper.Contract.SetBootstrap(&_Casper.TransactOpts, id)
}

// SetBootstrap is a paid mutator transaction binding the contract method 0xa746dadb.
//
// Solidity: function setBootstrap(id string) returns()
func (_Casper *CasperTransactorSession) SetBootstrap(id string) (*types.Transaction, error) {
	return _Casper.Contract.SetBootstrap(&_Casper.TransactOpts, id)
}

// SetCountryCode is a paid mutator transaction binding the contract method 0xb6254bd5.
//
// Solidity: function setCountryCode(nodeID string, originCode bytes4) returns()
func (_Casper *CasperTransactor) SetCountryCode(opts *bind.TransactOpts, nodeID string, originCode [4]byte) (*types.Transaction, error) {
	return _Casper.contract.Transact(opts, "setCountryCode", nodeID, originCode)
}

// SetCountryCode is a paid mutator transaction binding the contract method 0xb6254bd5.
//
// Solidity: function setCountryCode(nodeID string, originCode bytes4) returns()
func (_Casper *CasperSession) SetCountryCode(nodeID string, originCode [4]byte) (*types.Transaction, error) {
	return _Casper.Contract.SetCountryCode(&_Casper.TransactOpts, nodeID, originCode)
}

// SetCountryCode is a paid mutator transaction binding the contract method 0xb6254bd5.
//
// Solidity: function setCountryCode(nodeID string, originCode bytes4) returns()
func (_Casper *CasperTransactorSession) SetCountryCode(nodeID string, originCode [4]byte) (*types.Transaction, error) {
	return _Casper.Contract.SetCountryCode(&_Casper.TransactOpts, nodeID, originCode)
}

// SetRPCAddr is a paid mutator transaction binding the contract method 0x2add305a.
//
// Solidity: function setRPCAddr(nodeID string, addr string) returns()
func (_Casper *CasperTransactor) SetRPCAddr(opts *bind.TransactOpts, nodeID string, addr string) (*types.Transaction, error) {
	return _Casper.contract.Transact(opts, "setRPCAddr", nodeID, addr)
}

// SetRPCAddr is a paid mutator transaction binding the contract method 0x2add305a.
//
// Solidity: function setRPCAddr(nodeID string, addr string) returns()
func (_Casper *CasperSession) SetRPCAddr(nodeID string, addr string) (*types.Transaction, error) {
	return _Casper.Contract.SetRPCAddr(&_Casper.TransactOpts, nodeID, addr)
}

// SetRPCAddr is a paid mutator transaction binding the contract method 0x2add305a.
//
// Solidity: function setRPCAddr(nodeID string, addr string) returns()
func (_Casper *CasperTransactorSession) SetRPCAddr(nodeID string, addr string) (*types.Transaction, error) {
	return _Casper.Contract.SetRPCAddr(&_Casper.TransactOpts, nodeID, addr)
}

// CasperConsensusResultIterator is returned from FilterConsensusResult and is used to iterate over the raw logs and unpacked data for ConsensusResult events raised by the Casper contract.
type CasperConsensusResultIterator struct {
	Event *CasperConsensusResult // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CasperConsensusResultIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CasperConsensusResult)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CasperConsensusResult)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CasperConsensusResultIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CasperConsensusResultIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CasperConsensusResult represents a ConsensusResult event raised by the Casper contract.
type CasperConsensusResult struct {
	UUID      string
	Consensus [4][32]byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterConsensusResult is a free log retrieval operation binding the contract event 0xd969f986c5791f358032ad1011b25b3e1e4e3a879a128c851d06cef9202069e0.
//
// Solidity: e ConsensusResult(UUID string, consensus bytes32[4])
func (_Casper *CasperFilterer) FilterConsensusResult(opts *bind.FilterOpts) (*CasperConsensusResultIterator, error) {

	logs, sub, err := _Casper.contract.FilterLogs(opts, "ConsensusResult")
	if err != nil {
		return nil, err
	}
	return &CasperConsensusResultIterator{contract: _Casper.contract, event: "ConsensusResult", logs: logs, sub: sub}, nil
}

// WatchConsensusResult is a free log subscription operation binding the contract event 0xd969f986c5791f358032ad1011b25b3e1e4e3a879a128c851d06cef9202069e0.
//
// Solidity: e ConsensusResult(UUID string, consensus bytes32[4])
func (_Casper *CasperFilterer) WatchConsensusResult(opts *bind.WatchOpts, sink chan<- *CasperConsensusResult) (event.Subscription, error) {

	logs, sub, err := _Casper.contract.WatchLogs(opts, "ConsensusResult")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CasperConsensusResult)
				if err := _Casper.contract.UnpackLog(event, "ConsensusResult", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// CasperLogIterator is returned from FilterLog and is used to iterate over the raw logs and unpacked data for Log events raised by the Casper contract.
type CasperLogIterator struct {
	Event *CasperLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CasperLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CasperLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CasperLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CasperLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CasperLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CasperLog represents a Log event raised by the Casper contract.
type CasperLog struct {
	Info string
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLog is a free log retrieval operation binding the contract event 0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab.
//
// Solidity: e Log(info string)
func (_Casper *CasperFilterer) FilterLog(opts *bind.FilterOpts) (*CasperLogIterator, error) {

	logs, sub, err := _Casper.contract.FilterLogs(opts, "Log")
	if err != nil {
		return nil, err
	}
	return &CasperLogIterator{contract: _Casper.contract, event: "Log", logs: logs, sub: sub}, nil
}

// WatchLog is a free log subscription operation binding the contract event 0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab.
//
// Solidity: e Log(info string)
func (_Casper *CasperFilterer) WatchLog(opts *bind.WatchOpts, sink chan<- *CasperLog) (event.Subscription, error) {

	logs, sub, err := _Casper.contract.WatchLogs(opts, "Log")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CasperLog)
				if err := _Casper.contract.UnpackLog(event, "Log", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// CasperProviderCheckEventIterator is returned from FilterProviderCheckEvent and is used to iterate over the raw logs and unpacked data for ProviderCheckEvent events raised by the Casper contract.
type CasperProviderCheckEventIterator struct {
	Event *CasperProviderCheckEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CasperProviderCheckEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CasperProviderCheckEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CasperProviderCheckEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CasperProviderCheckEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CasperProviderCheckEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CasperProviderCheckEvent represents a ProviderCheckEvent event raised by the Casper contract.
type CasperProviderCheckEvent struct {
	Id  string
	Raw types.Log // Blockchain specific contextual infos
}

// FilterProviderCheckEvent is a free log retrieval operation binding the contract event 0x0f188c8296ba98ac02a6754d69052a7f560c230e9a504a7d5618332a5de589f3.
//
// Solidity: e ProviderCheckEvent(id string)
func (_Casper *CasperFilterer) FilterProviderCheckEvent(opts *bind.FilterOpts) (*CasperProviderCheckEventIterator, error) {

	logs, sub, err := _Casper.contract.FilterLogs(opts, "ProviderCheckEvent")
	if err != nil {
		return nil, err
	}
	return &CasperProviderCheckEventIterator{contract: _Casper.contract, event: "ProviderCheckEvent", logs: logs, sub: sub}, nil
}

// WatchProviderCheckEvent is a free log subscription operation binding the contract event 0x0f188c8296ba98ac02a6754d69052a7f560c230e9a504a7d5618332a5de589f3.
//
// Solidity: e ProviderCheckEvent(id string)
func (_Casper *CasperFilterer) WatchProviderCheckEvent(opts *bind.WatchOpts, sink chan<- *CasperProviderCheckEvent) (event.Subscription, error) {

	logs, sub, err := _Casper.contract.WatchLogs(opts, "ProviderCheckEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CasperProviderCheckEvent)
				if err := _Casper.contract.UnpackLog(event, "ProviderCheckEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// CasperProviderOfflineIterator is returned from FilterProviderOffline and is used to iterate over the raw logs and unpacked data for ProviderOffline events raised by the Casper contract.
type CasperProviderOfflineIterator struct {
	Event *CasperProviderOffline // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CasperProviderOfflineIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CasperProviderOffline)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CasperProviderOffline)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CasperProviderOfflineIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CasperProviderOfflineIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CasperProviderOffline represents a ProviderOffline event raised by the Casper contract.
type CasperProviderOffline struct {
	Banned string
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterProviderOffline is a free log retrieval operation binding the contract event 0x8374d399a7ca1b13cfc5d10c87699bb613f7f16a494fb5900a9062c28de428d6.
//
// Solidity: e ProviderOffline(banned string)
func (_Casper *CasperFilterer) FilterProviderOffline(opts *bind.FilterOpts) (*CasperProviderOfflineIterator, error) {

	logs, sub, err := _Casper.contract.FilterLogs(opts, "ProviderOffline")
	if err != nil {
		return nil, err
	}
	return &CasperProviderOfflineIterator{contract: _Casper.contract, event: "ProviderOffline", logs: logs, sub: sub}, nil
}

// WatchProviderOffline is a free log subscription operation binding the contract event 0x8374d399a7ca1b13cfc5d10c87699bb613f7f16a494fb5900a9062c28de428d6.
//
// Solidity: e ProviderOffline(banned string)
func (_Casper *CasperFilterer) WatchProviderOffline(opts *bind.WatchOpts, sink chan<- *CasperProviderOffline) (event.Subscription, error) {

	logs, sub, err := _Casper.contract.WatchLogs(opts, "ProviderOffline")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CasperProviderOffline)
				if err := _Casper.contract.UnpackLog(event, "ProviderOffline", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// CasperReturnStringIterator is returned from FilterReturnString and is used to iterate over the raw logs and unpacked data for ReturnString events raised by the Casper contract.
type CasperReturnStringIterator struct {
	Event *CasperReturnString // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CasperReturnStringIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CasperReturnString)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CasperReturnString)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CasperReturnStringIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CasperReturnStringIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CasperReturnString represents a ReturnString event raised by the Casper contract.
type CasperReturnString struct {
	Val string
	Raw types.Log // Blockchain specific contextual infos
}

// FilterReturnString is a free log retrieval operation binding the contract event 0x9e91c0d67653515860c12ff5c5211b3ef5b98565f70728283708dd7bf754c4f1.
//
// Solidity: e ReturnString(val string)
func (_Casper *CasperFilterer) FilterReturnString(opts *bind.FilterOpts) (*CasperReturnStringIterator, error) {

	logs, sub, err := _Casper.contract.FilterLogs(opts, "ReturnString")
	if err != nil {
		return nil, err
	}
	return &CasperReturnStringIterator{contract: _Casper.contract, event: "ReturnString", logs: logs, sub: sub}, nil
}

// WatchReturnString is a free log subscription operation binding the contract event 0x9e91c0d67653515860c12ff5c5211b3ef5b98565f70728283708dd7bf754c4f1.
//
// Solidity: e ReturnString(val string)
func (_Casper *CasperFilterer) WatchReturnString(opts *bind.WatchOpts, sink chan<- *CasperReturnString) (event.Subscription, error) {

	logs, sub, err := _Casper.contract.WatchLogs(opts, "ReturnString")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CasperReturnString)
				if err := _Casper.contract.UnpackLog(event, "ReturnString", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// CasperVerificationTargetIterator is returned from FilterVerificationTarget and is used to iterate over the raw logs and unpacked data for VerificationTarget events raised by the Casper contract.
type CasperVerificationTargetIterator struct {
	Event *CasperVerificationTarget // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CasperVerificationTargetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CasperVerificationTarget)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CasperVerificationTarget)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CasperVerificationTargetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CasperVerificationTargetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CasperVerificationTarget represents a VerificationTarget event raised by the Casper contract.
type CasperVerificationTarget struct {
	UUID string
	Id   string
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterVerificationTarget is a free log retrieval operation binding the contract event 0x90b31306678e0bff502a1577544c233c2cac3cc3696fe70577826fc77b105e00.
//
// Solidity: e verificationTarget(UUID string, id string)
func (_Casper *CasperFilterer) FilterVerificationTarget(opts *bind.FilterOpts) (*CasperVerificationTargetIterator, error) {

	logs, sub, err := _Casper.contract.FilterLogs(opts, "verificationTarget")
	if err != nil {
		return nil, err
	}
	return &CasperVerificationTargetIterator{contract: _Casper.contract, event: "verificationTarget", logs: logs, sub: sub}, nil
}

// WatchVerificationTarget is a free log subscription operation binding the contract event 0x90b31306678e0bff502a1577544c233c2cac3cc3696fe70577826fc77b105e00.
//
// Solidity: e verificationTarget(UUID string, id string)
func (_Casper *CasperFilterer) WatchVerificationTarget(opts *bind.WatchOpts, sink chan<- *CasperVerificationTarget) (event.Subscription, error) {

	logs, sub, err := _Casper.contract.WatchLogs(opts, "verificationTarget")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CasperVerificationTarget)
				if err := _Casper.contract.UnpackLog(event, "verificationTarget", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

