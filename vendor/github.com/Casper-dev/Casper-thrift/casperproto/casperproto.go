// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package casperproto

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - Hash
//  - Addr
type HashAddr struct {
  Hash string `thrift:"hash,1" db:"hash" json:"hash"`
  Addr string `thrift:"addr,2" db:"addr" json:"addr"`
}

func NewHashAddr() *HashAddr {
  return &HashAddr{}
}


func (p *HashAddr) GetHash() string {
  return p.Hash
}

func (p *HashAddr) GetAddr() string {
  return p.Addr
}
func (p *HashAddr) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HashAddr)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Hash = v
}
  return nil
}

func (p *HashAddr)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Addr = v
}
  return nil
}

func (p *HashAddr) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("HashAddr"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HashAddr) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hash", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hash: ", p), err) }
  if err := oprot.WriteString(string(p.Hash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hash (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hash: ", p), err) }
  return err
}

func (p *HashAddr) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("addr", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:addr: ", p), err) }
  if err := oprot.WriteString(string(p.Addr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.addr (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:addr: ", p), err) }
  return err
}

func (p *HashAddr) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HashAddr(%+v)", *p)
}

// Attributes:
//  - IpfsAddr
//  - ThriftAddr
type NodeInfo struct {
  IpfsAddr string `thrift:"ipfsAddr,1" db:"ipfsAddr" json:"ipfsAddr"`
  ThriftAddr string `thrift:"thriftAddr,2" db:"thriftAddr" json:"thriftAddr"`
}

func NewNodeInfo() *NodeInfo {
  return &NodeInfo{}
}


func (p *NodeInfo) GetIpfsAddr() string {
  return p.IpfsAddr
}

func (p *NodeInfo) GetThriftAddr() string {
  return p.ThriftAddr
}
func (p *NodeInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *NodeInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.IpfsAddr = v
}
  return nil
}

func (p *NodeInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ThriftAddr = v
}
  return nil
}

func (p *NodeInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("NodeInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NodeInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ipfsAddr", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ipfsAddr: ", p), err) }
  if err := oprot.WriteString(string(p.IpfsAddr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ipfsAddr (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ipfsAddr: ", p), err) }
  return err
}

func (p *NodeInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("thriftAddr", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:thriftAddr: ", p), err) }
  if err := oprot.WriteString(string(p.ThriftAddr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.thriftAddr (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:thriftAddr: ", p), err) }
  return err
}

func (p *NodeInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NodeInfo(%+v)", *p)
}

// Attributes:
//  - UUID
//  - First
//  - Last
//  - Initiator
//  - Providers
//  - Diffuse
type ChunkInfo struct {
  UUID string `thrift:"uuid,1" db:"uuid" json:"uuid"`
  First int64 `thrift:"first,2" db:"first" json:"first"`
  Last int64 `thrift:"last,3" db:"last" json:"last"`
  Initiator string `thrift:"initiator,4" db:"initiator" json:"initiator"`
  Providers []*NodeInfo `thrift:"providers,5" db:"providers" json:"providers"`
  Diffuse string `thrift:"diffuse,6" db:"diffuse" json:"diffuse"`
}

func NewChunkInfo() *ChunkInfo {
  return &ChunkInfo{}
}


func (p *ChunkInfo) GetUUID() string {
  return p.UUID
}

func (p *ChunkInfo) GetFirst() int64 {
  return p.First
}

func (p *ChunkInfo) GetLast() int64 {
  return p.Last
}

func (p *ChunkInfo) GetInitiator() string {
  return p.Initiator
}

func (p *ChunkInfo) GetProviders() []*NodeInfo {
  return p.Providers
}

func (p *ChunkInfo) GetDiffuse() string {
  return p.Diffuse
}
func (p *ChunkInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChunkInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UUID = v
}
  return nil
}

func (p *ChunkInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.First = v
}
  return nil
}

func (p *ChunkInfo)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Last = v
}
  return nil
}

func (p *ChunkInfo)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Initiator = v
}
  return nil
}

func (p *ChunkInfo)  ReadField5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*NodeInfo, 0, size)
  p.Providers =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &NodeInfo{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.Providers = append(p.Providers, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ChunkInfo)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Diffuse = v
}
  return nil
}

func (p *ChunkInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ChunkInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChunkInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uuid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uuid: ", p), err) }
  if err := oprot.WriteString(string(p.UUID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uuid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uuid: ", p), err) }
  return err
}

func (p *ChunkInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("first", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:first: ", p), err) }
  if err := oprot.WriteI64(int64(p.First)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.first (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:first: ", p), err) }
  return err
}

func (p *ChunkInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("last", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:last: ", p), err) }
  if err := oprot.WriteI64(int64(p.Last)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.last (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:last: ", p), err) }
  return err
}

func (p *ChunkInfo) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("initiator", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:initiator: ", p), err) }
  if err := oprot.WriteString(string(p.Initiator)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.initiator (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:initiator: ", p), err) }
  return err
}

func (p *ChunkInfo) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("providers", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:providers: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Providers)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Providers {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:providers: ", p), err) }
  return err
}

func (p *ChunkInfo) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("diffuse", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:diffuse: ", p), err) }
  if err := oprot.WriteString(string(p.Diffuse)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.diffuse (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:diffuse: ", p), err) }
  return err
}

func (p *ChunkInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChunkInfo(%+v)", *p)
}

// Attributes:
//  - Timestamp
//  - ID
type PingResult_ struct {
  Timestamp int64 `thrift:"timestamp,1" db:"timestamp" json:"timestamp"`
  ID string `thrift:"id,2" db:"id" json:"id"`
}

func NewPingResult_() *PingResult_ {
  return &PingResult_{}
}


func (p *PingResult_) GetTimestamp() int64 {
  return p.Timestamp
}

func (p *PingResult_) GetID() string {
  return p.ID
}
func (p *PingResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PingResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Timestamp = v
}
  return nil
}

func (p *PingResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *PingResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PingResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PingResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:timestamp: ", p), err) }
  if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.timestamp (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:timestamp: ", p), err) }
  return err
}

func (p *PingResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := oprot.WriteString(string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *PingResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PingResult_(%+v)", *p)
}

type CasperServer interface {
  SendConnectQuery(ctx context.Context) (r string, err error)
  // Parameters:
  //  - Hash
  //  - IpfsAddr
  //  - SizeToStore
  SendUploadQuery(ctx context.Context, hash string, ipfsAddr string, sizeToStore int64) (r string, err error)
  // Parameters:
  //  - Hash
  //  - IpfsAddr
  //  - Wallet
  SendDownloadQuery(ctx context.Context, hash string, ipfsAddr string, wallet string) (r string, err error)
  // Parameters:
  //  - UUID
  //  - Hash
  //  - SizeToStore
  SendUpdateQuery(ctx context.Context, uuid string, hash string, sizeToStore int64) (r string, err error)
  // Parameters:
  //  - Hash
  SendDeleteQuery(ctx context.Context, hash string) (r string, err error)
  // Parameters:
  //  - UUID
  //  - Ninfo
  SendVerificationQuery(ctx context.Context, UUID string, ninfo *NodeInfo) (err error)
  // Parameters:
  //  - Info
  SendChunkInfo(ctx context.Context, info *ChunkInfo) (err error)
  // Parameters:
  //  - UUID
  //  - IpfsAddr
  //  - HashDiffuse
  SendChecksumHash(ctx context.Context, UUID string, ipfsAddr string, hashDiffuse string) (err error)
  // Parameters:
  //  - UUID
  //  - IpfsAddr
  //  - AddrToHash
  SendValidationResults(ctx context.Context, UUID string, ipfsAddr string, addrToHash map[string]string) (err error)
  // Parameters:
  //  - UUID
  //  - First
  //  - Last
  //  - Salt
  GetFileChecksum(ctx context.Context, uuid string, first int64, last int64, salt string) (r string, err error)
  // Parameters:
  //  - Hash
  //  - BlockedIpfsAddr
  //  - SizeToStore
  SendReplicationQuery(ctx context.Context, hash string, blockedIpfsAddr string, sizeToStore int64) (r string, err error)
  Ping(ctx context.Context) (r *PingResult_, err error)
}

type CasperServerClient struct {
  c thrift.TClient
}

// Deprecated: Use NewCasperServer instead
func NewCasperServerClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *CasperServerClient {
  return &CasperServerClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewCasperServer instead
func NewCasperServerClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *CasperServerClient {
  return &CasperServerClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewCasperServerClient(c thrift.TClient) *CasperServerClient {
  return &CasperServerClient{
    c: c,
  }
}

func (p *CasperServerClient) SendConnectQuery(ctx context.Context) (r string, err error) {
  var _args1 CasperServerSendConnectQueryArgs
  var _result2 CasperServerSendConnectQueryResult
  if err = p.c.Call(ctx, "SendConnectQuery", &_args1, &_result2); err != nil {
    return
  }
  return _result2.GetSuccess(), nil
}

// Parameters:
//  - Hash
//  - IpfsAddr
//  - SizeToStore
func (p *CasperServerClient) SendUploadQuery(ctx context.Context, hash string, ipfsAddr string, sizeToStore int64) (r string, err error) {
  var _args3 CasperServerSendUploadQueryArgs
  _args3.Hash = hash
  _args3.IpfsAddr = ipfsAddr
  _args3.SizeToStore = sizeToStore
  var _result4 CasperServerSendUploadQueryResult
  if err = p.c.Call(ctx, "SendUploadQuery", &_args3, &_result4); err != nil {
    return
  }
  return _result4.GetSuccess(), nil
}

// Parameters:
//  - Hash
//  - IpfsAddr
//  - Wallet
func (p *CasperServerClient) SendDownloadQuery(ctx context.Context, hash string, ipfsAddr string, wallet string) (r string, err error) {
  var _args5 CasperServerSendDownloadQueryArgs
  _args5.Hash = hash
  _args5.IpfsAddr = ipfsAddr
  _args5.Wallet = wallet
  var _result6 CasperServerSendDownloadQueryResult
  if err = p.c.Call(ctx, "SendDownloadQuery", &_args5, &_result6); err != nil {
    return
  }
  return _result6.GetSuccess(), nil
}

// Parameters:
//  - UUID
//  - Hash
//  - SizeToStore
func (p *CasperServerClient) SendUpdateQuery(ctx context.Context, uuid string, hash string, sizeToStore int64) (r string, err error) {
  var _args7 CasperServerSendUpdateQueryArgs
  _args7.UUID = uuid
  _args7.Hash = hash
  _args7.SizeToStore = sizeToStore
  var _result8 CasperServerSendUpdateQueryResult
  if err = p.c.Call(ctx, "SendUpdateQuery", &_args7, &_result8); err != nil {
    return
  }
  return _result8.GetSuccess(), nil
}

// Parameters:
//  - Hash
func (p *CasperServerClient) SendDeleteQuery(ctx context.Context, hash string) (r string, err error) {
  var _args9 CasperServerSendDeleteQueryArgs
  _args9.Hash = hash
  var _result10 CasperServerSendDeleteQueryResult
  if err = p.c.Call(ctx, "SendDeleteQuery", &_args9, &_result10); err != nil {
    return
  }
  return _result10.GetSuccess(), nil
}

// Parameters:
//  - UUID
//  - Ninfo
func (p *CasperServerClient) SendVerificationQuery(ctx context.Context, UUID string, ninfo *NodeInfo) (err error) {
  var _args11 CasperServerSendVerificationQueryArgs
  _args11.UUID = UUID
  _args11.Ninfo = ninfo
  var _result12 CasperServerSendVerificationQueryResult
  if err = p.c.Call(ctx, "SendVerificationQuery", &_args11, &_result12); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - Info
func (p *CasperServerClient) SendChunkInfo(ctx context.Context, info *ChunkInfo) (err error) {
  var _args13 CasperServerSendChunkInfoArgs
  _args13.Info = info
  var _result14 CasperServerSendChunkInfoResult
  if err = p.c.Call(ctx, "SendChunkInfo", &_args13, &_result14); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - UUID
//  - IpfsAddr
//  - HashDiffuse
func (p *CasperServerClient) SendChecksumHash(ctx context.Context, UUID string, ipfsAddr string, hashDiffuse string) (err error) {
  var _args15 CasperServerSendChecksumHashArgs
  _args15.UUID = UUID
  _args15.IpfsAddr = ipfsAddr
  _args15.HashDiffuse = hashDiffuse
  var _result16 CasperServerSendChecksumHashResult
  if err = p.c.Call(ctx, "SendChecksumHash", &_args15, &_result16); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - UUID
//  - IpfsAddr
//  - AddrToHash
func (p *CasperServerClient) SendValidationResults(ctx context.Context, UUID string, ipfsAddr string, addrToHash map[string]string) (err error) {
  var _args17 CasperServerSendValidationResultsArgs
  _args17.UUID = UUID
  _args17.IpfsAddr = ipfsAddr
  _args17.AddrToHash = addrToHash
  var _result18 CasperServerSendValidationResultsResult
  if err = p.c.Call(ctx, "SendValidationResults", &_args17, &_result18); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - UUID
//  - First
//  - Last
//  - Salt
func (p *CasperServerClient) GetFileChecksum(ctx context.Context, uuid string, first int64, last int64, salt string) (r string, err error) {
  var _args19 CasperServerGetFileChecksumArgs
  _args19.UUID = uuid
  _args19.First = first
  _args19.Last = last
  _args19.Salt = salt
  var _result20 CasperServerGetFileChecksumResult
  if err = p.c.Call(ctx, "GetFileChecksum", &_args19, &_result20); err != nil {
    return
  }
  return _result20.GetSuccess(), nil
}

// Parameters:
//  - Hash
//  - BlockedIpfsAddr
//  - SizeToStore
func (p *CasperServerClient) SendReplicationQuery(ctx context.Context, hash string, blockedIpfsAddr string, sizeToStore int64) (r string, err error) {
  var _args21 CasperServerSendReplicationQueryArgs
  _args21.Hash = hash
  _args21.BlockedIpfsAddr = blockedIpfsAddr
  _args21.SizeToStore = sizeToStore
  var _result22 CasperServerSendReplicationQueryResult
  if err = p.c.Call(ctx, "SendReplicationQuery", &_args21, &_result22); err != nil {
    return
  }
  return _result22.GetSuccess(), nil
}

func (p *CasperServerClient) Ping(ctx context.Context) (r *PingResult_, err error) {
  var _args23 CasperServerPingArgs
  var _result24 CasperServerPingResult
  if err = p.c.Call(ctx, "Ping", &_args23, &_result24); err != nil {
    return
  }
  return _result24.GetSuccess(), nil
}

type CasperServerProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler CasperServer
}

func (p *CasperServerProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *CasperServerProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *CasperServerProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewCasperServerProcessor(handler CasperServer) *CasperServerProcessor {

  self25 := &CasperServerProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self25.processorMap["SendConnectQuery"] = &casperServerProcessorSendConnectQuery{handler:handler}
  self25.processorMap["SendUploadQuery"] = &casperServerProcessorSendUploadQuery{handler:handler}
  self25.processorMap["SendDownloadQuery"] = &casperServerProcessorSendDownloadQuery{handler:handler}
  self25.processorMap["SendUpdateQuery"] = &casperServerProcessorSendUpdateQuery{handler:handler}
  self25.processorMap["SendDeleteQuery"] = &casperServerProcessorSendDeleteQuery{handler:handler}
  self25.processorMap["SendVerificationQuery"] = &casperServerProcessorSendVerificationQuery{handler:handler}
  self25.processorMap["SendChunkInfo"] = &casperServerProcessorSendChunkInfo{handler:handler}
  self25.processorMap["SendChecksumHash"] = &casperServerProcessorSendChecksumHash{handler:handler}
  self25.processorMap["SendValidationResults"] = &casperServerProcessorSendValidationResults{handler:handler}
  self25.processorMap["GetFileChecksum"] = &casperServerProcessorGetFileChecksum{handler:handler}
  self25.processorMap["SendReplicationQuery"] = &casperServerProcessorSendReplicationQuery{handler:handler}
  self25.processorMap["Ping"] = &casperServerProcessorPing{handler:handler}
return self25
}

func (p *CasperServerProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x26 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x26.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x26

}

type casperServerProcessorSendConnectQuery struct {
  handler CasperServer
}

func (p *casperServerProcessorSendConnectQuery) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CasperServerSendConnectQueryArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("SendConnectQuery", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CasperServerSendConnectQueryResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.SendConnectQuery(ctx); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SendConnectQuery: " + err2.Error())
    oprot.WriteMessageBegin("SendConnectQuery", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("SendConnectQuery", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type casperServerProcessorSendUploadQuery struct {
  handler CasperServer
}

func (p *casperServerProcessorSendUploadQuery) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CasperServerSendUploadQueryArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("SendUploadQuery", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CasperServerSendUploadQueryResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.SendUploadQuery(ctx, args.Hash, args.IpfsAddr, args.SizeToStore); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SendUploadQuery: " + err2.Error())
    oprot.WriteMessageBegin("SendUploadQuery", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("SendUploadQuery", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type casperServerProcessorSendDownloadQuery struct {
  handler CasperServer
}

func (p *casperServerProcessorSendDownloadQuery) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CasperServerSendDownloadQueryArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("SendDownloadQuery", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CasperServerSendDownloadQueryResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.SendDownloadQuery(ctx, args.Hash, args.IpfsAddr, args.Wallet); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SendDownloadQuery: " + err2.Error())
    oprot.WriteMessageBegin("SendDownloadQuery", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("SendDownloadQuery", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type casperServerProcessorSendUpdateQuery struct {
  handler CasperServer
}

func (p *casperServerProcessorSendUpdateQuery) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CasperServerSendUpdateQueryArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("SendUpdateQuery", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CasperServerSendUpdateQueryResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.SendUpdateQuery(ctx, args.UUID, args.Hash, args.SizeToStore); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SendUpdateQuery: " + err2.Error())
    oprot.WriteMessageBegin("SendUpdateQuery", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("SendUpdateQuery", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type casperServerProcessorSendDeleteQuery struct {
  handler CasperServer
}

func (p *casperServerProcessorSendDeleteQuery) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CasperServerSendDeleteQueryArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("SendDeleteQuery", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CasperServerSendDeleteQueryResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.SendDeleteQuery(ctx, args.Hash); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SendDeleteQuery: " + err2.Error())
    oprot.WriteMessageBegin("SendDeleteQuery", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("SendDeleteQuery", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type casperServerProcessorSendVerificationQuery struct {
  handler CasperServer
}

func (p *casperServerProcessorSendVerificationQuery) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CasperServerSendVerificationQueryArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("SendVerificationQuery", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CasperServerSendVerificationQueryResult{}
  var err2 error
  if err2 = p.handler.SendVerificationQuery(ctx, args.UUID, args.Ninfo); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SendVerificationQuery: " + err2.Error())
    oprot.WriteMessageBegin("SendVerificationQuery", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("SendVerificationQuery", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type casperServerProcessorSendChunkInfo struct {
  handler CasperServer
}

func (p *casperServerProcessorSendChunkInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CasperServerSendChunkInfoArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("SendChunkInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CasperServerSendChunkInfoResult{}
  var err2 error
  if err2 = p.handler.SendChunkInfo(ctx, args.Info); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SendChunkInfo: " + err2.Error())
    oprot.WriteMessageBegin("SendChunkInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("SendChunkInfo", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type casperServerProcessorSendChecksumHash struct {
  handler CasperServer
}

func (p *casperServerProcessorSendChecksumHash) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CasperServerSendChecksumHashArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("SendChecksumHash", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CasperServerSendChecksumHashResult{}
  var err2 error
  if err2 = p.handler.SendChecksumHash(ctx, args.UUID, args.IpfsAddr, args.HashDiffuse); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SendChecksumHash: " + err2.Error())
    oprot.WriteMessageBegin("SendChecksumHash", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("SendChecksumHash", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type casperServerProcessorSendValidationResults struct {
  handler CasperServer
}

func (p *casperServerProcessorSendValidationResults) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CasperServerSendValidationResultsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("SendValidationResults", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CasperServerSendValidationResultsResult{}
  var err2 error
  if err2 = p.handler.SendValidationResults(ctx, args.UUID, args.IpfsAddr, args.AddrToHash); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SendValidationResults: " + err2.Error())
    oprot.WriteMessageBegin("SendValidationResults", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("SendValidationResults", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type casperServerProcessorGetFileChecksum struct {
  handler CasperServer
}

func (p *casperServerProcessorGetFileChecksum) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CasperServerGetFileChecksumArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetFileChecksum", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CasperServerGetFileChecksumResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.GetFileChecksum(ctx, args.UUID, args.First, args.Last, args.Salt); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetFileChecksum: " + err2.Error())
    oprot.WriteMessageBegin("GetFileChecksum", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("GetFileChecksum", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type casperServerProcessorSendReplicationQuery struct {
  handler CasperServer
}

func (p *casperServerProcessorSendReplicationQuery) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CasperServerSendReplicationQueryArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("SendReplicationQuery", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CasperServerSendReplicationQueryResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.SendReplicationQuery(ctx, args.Hash, args.BlockedIpfsAddr, args.SizeToStore); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SendReplicationQuery: " + err2.Error())
    oprot.WriteMessageBegin("SendReplicationQuery", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("SendReplicationQuery", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type casperServerProcessorPing struct {
  handler CasperServer
}

func (p *casperServerProcessorPing) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CasperServerPingArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("Ping", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CasperServerPingResult{}
var retval *PingResult_
  var err2 error
  if retval, err2 = p.handler.Ping(ctx); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Ping: " + err2.Error())
    oprot.WriteMessageBegin("Ping", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("Ping", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

type CasperServerSendConnectQueryArgs struct {
}

func NewCasperServerSendConnectQueryArgs() *CasperServerSendConnectQueryArgs {
  return &CasperServerSendConnectQueryArgs{}
}

func (p *CasperServerSendConnectQueryArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CasperServerSendConnectQueryArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SendConnectQuery_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CasperServerSendConnectQueryArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CasperServerSendConnectQueryArgs(%+v)", *p)
}

// Attributes:
//  - Success
type CasperServerSendConnectQueryResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewCasperServerSendConnectQueryResult() *CasperServerSendConnectQueryResult {
  return &CasperServerSendConnectQueryResult{}
}

var CasperServerSendConnectQueryResult_Success_DEFAULT string
func (p *CasperServerSendConnectQueryResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return CasperServerSendConnectQueryResult_Success_DEFAULT
  }
return *p.Success
}
func (p *CasperServerSendConnectQueryResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CasperServerSendConnectQueryResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CasperServerSendConnectQueryResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *CasperServerSendConnectQueryResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SendConnectQuery_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CasperServerSendConnectQueryResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CasperServerSendConnectQueryResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CasperServerSendConnectQueryResult(%+v)", *p)
}

// Attributes:
//  - Hash
//  - IpfsAddr
//  - SizeToStore
type CasperServerSendUploadQueryArgs struct {
  Hash string `thrift:"hash,1" db:"hash" json:"hash"`
  IpfsAddr string `thrift:"ipfsAddr,2" db:"ipfsAddr" json:"ipfsAddr"`
  SizeToStore int64 `thrift:"sizeToStore,3" db:"sizeToStore" json:"sizeToStore"`
}

func NewCasperServerSendUploadQueryArgs() *CasperServerSendUploadQueryArgs {
  return &CasperServerSendUploadQueryArgs{}
}


func (p *CasperServerSendUploadQueryArgs) GetHash() string {
  return p.Hash
}

func (p *CasperServerSendUploadQueryArgs) GetIpfsAddr() string {
  return p.IpfsAddr
}

func (p *CasperServerSendUploadQueryArgs) GetSizeToStore() int64 {
  return p.SizeToStore
}
func (p *CasperServerSendUploadQueryArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CasperServerSendUploadQueryArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Hash = v
}
  return nil
}

func (p *CasperServerSendUploadQueryArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IpfsAddr = v
}
  return nil
}

func (p *CasperServerSendUploadQueryArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SizeToStore = v
}
  return nil
}

func (p *CasperServerSendUploadQueryArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SendUploadQuery_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CasperServerSendUploadQueryArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hash", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hash: ", p), err) }
  if err := oprot.WriteString(string(p.Hash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hash (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hash: ", p), err) }
  return err
}

func (p *CasperServerSendUploadQueryArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ipfsAddr", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ipfsAddr: ", p), err) }
  if err := oprot.WriteString(string(p.IpfsAddr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ipfsAddr (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ipfsAddr: ", p), err) }
  return err
}

func (p *CasperServerSendUploadQueryArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sizeToStore", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sizeToStore: ", p), err) }
  if err := oprot.WriteI64(int64(p.SizeToStore)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sizeToStore (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sizeToStore: ", p), err) }
  return err
}

func (p *CasperServerSendUploadQueryArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CasperServerSendUploadQueryArgs(%+v)", *p)
}

// Attributes:
//  - Success
type CasperServerSendUploadQueryResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewCasperServerSendUploadQueryResult() *CasperServerSendUploadQueryResult {
  return &CasperServerSendUploadQueryResult{}
}

var CasperServerSendUploadQueryResult_Success_DEFAULT string
func (p *CasperServerSendUploadQueryResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return CasperServerSendUploadQueryResult_Success_DEFAULT
  }
return *p.Success
}
func (p *CasperServerSendUploadQueryResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CasperServerSendUploadQueryResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CasperServerSendUploadQueryResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *CasperServerSendUploadQueryResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SendUploadQuery_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CasperServerSendUploadQueryResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CasperServerSendUploadQueryResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CasperServerSendUploadQueryResult(%+v)", *p)
}

// Attributes:
//  - Hash
//  - IpfsAddr
//  - Wallet
type CasperServerSendDownloadQueryArgs struct {
  Hash string `thrift:"hash,1" db:"hash" json:"hash"`
  IpfsAddr string `thrift:"ipfsAddr,2" db:"ipfsAddr" json:"ipfsAddr"`
  Wallet string `thrift:"wallet,3" db:"wallet" json:"wallet"`
}

func NewCasperServerSendDownloadQueryArgs() *CasperServerSendDownloadQueryArgs {
  return &CasperServerSendDownloadQueryArgs{}
}


func (p *CasperServerSendDownloadQueryArgs) GetHash() string {
  return p.Hash
}

func (p *CasperServerSendDownloadQueryArgs) GetIpfsAddr() string {
  return p.IpfsAddr
}

func (p *CasperServerSendDownloadQueryArgs) GetWallet() string {
  return p.Wallet
}
func (p *CasperServerSendDownloadQueryArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CasperServerSendDownloadQueryArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Hash = v
}
  return nil
}

func (p *CasperServerSendDownloadQueryArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IpfsAddr = v
}
  return nil
}

func (p *CasperServerSendDownloadQueryArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Wallet = v
}
  return nil
}

func (p *CasperServerSendDownloadQueryArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SendDownloadQuery_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CasperServerSendDownloadQueryArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hash", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hash: ", p), err) }
  if err := oprot.WriteString(string(p.Hash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hash (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hash: ", p), err) }
  return err
}

func (p *CasperServerSendDownloadQueryArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ipfsAddr", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ipfsAddr: ", p), err) }
  if err := oprot.WriteString(string(p.IpfsAddr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ipfsAddr (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ipfsAddr: ", p), err) }
  return err
}

func (p *CasperServerSendDownloadQueryArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("wallet", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:wallet: ", p), err) }
  if err := oprot.WriteString(string(p.Wallet)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.wallet (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:wallet: ", p), err) }
  return err
}

func (p *CasperServerSendDownloadQueryArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CasperServerSendDownloadQueryArgs(%+v)", *p)
}

// Attributes:
//  - Success
type CasperServerSendDownloadQueryResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewCasperServerSendDownloadQueryResult() *CasperServerSendDownloadQueryResult {
  return &CasperServerSendDownloadQueryResult{}
}

var CasperServerSendDownloadQueryResult_Success_DEFAULT string
func (p *CasperServerSendDownloadQueryResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return CasperServerSendDownloadQueryResult_Success_DEFAULT
  }
return *p.Success
}
func (p *CasperServerSendDownloadQueryResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CasperServerSendDownloadQueryResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CasperServerSendDownloadQueryResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *CasperServerSendDownloadQueryResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SendDownloadQuery_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CasperServerSendDownloadQueryResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CasperServerSendDownloadQueryResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CasperServerSendDownloadQueryResult(%+v)", *p)
}

// Attributes:
//  - UUID
//  - Hash
//  - SizeToStore
type CasperServerSendUpdateQueryArgs struct {
  UUID string `thrift:"uuid,1" db:"uuid" json:"uuid"`
  Hash string `thrift:"hash,2" db:"hash" json:"hash"`
  SizeToStore int64 `thrift:"sizeToStore,3" db:"sizeToStore" json:"sizeToStore"`
}

func NewCasperServerSendUpdateQueryArgs() *CasperServerSendUpdateQueryArgs {
  return &CasperServerSendUpdateQueryArgs{}
}


func (p *CasperServerSendUpdateQueryArgs) GetUUID() string {
  return p.UUID
}

func (p *CasperServerSendUpdateQueryArgs) GetHash() string {
  return p.Hash
}

func (p *CasperServerSendUpdateQueryArgs) GetSizeToStore() int64 {
  return p.SizeToStore
}
func (p *CasperServerSendUpdateQueryArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CasperServerSendUpdateQueryArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UUID = v
}
  return nil
}

func (p *CasperServerSendUpdateQueryArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Hash = v
}
  return nil
}

func (p *CasperServerSendUpdateQueryArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SizeToStore = v
}
  return nil
}

func (p *CasperServerSendUpdateQueryArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SendUpdateQuery_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CasperServerSendUpdateQueryArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uuid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uuid: ", p), err) }
  if err := oprot.WriteString(string(p.UUID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uuid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uuid: ", p), err) }
  return err
}

func (p *CasperServerSendUpdateQueryArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hash", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hash: ", p), err) }
  if err := oprot.WriteString(string(p.Hash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hash (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hash: ", p), err) }
  return err
}

func (p *CasperServerSendUpdateQueryArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sizeToStore", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sizeToStore: ", p), err) }
  if err := oprot.WriteI64(int64(p.SizeToStore)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sizeToStore (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sizeToStore: ", p), err) }
  return err
}

func (p *CasperServerSendUpdateQueryArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CasperServerSendUpdateQueryArgs(%+v)", *p)
}

// Attributes:
//  - Success
type CasperServerSendUpdateQueryResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewCasperServerSendUpdateQueryResult() *CasperServerSendUpdateQueryResult {
  return &CasperServerSendUpdateQueryResult{}
}

var CasperServerSendUpdateQueryResult_Success_DEFAULT string
func (p *CasperServerSendUpdateQueryResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return CasperServerSendUpdateQueryResult_Success_DEFAULT
  }
return *p.Success
}
func (p *CasperServerSendUpdateQueryResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CasperServerSendUpdateQueryResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CasperServerSendUpdateQueryResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *CasperServerSendUpdateQueryResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SendUpdateQuery_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CasperServerSendUpdateQueryResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CasperServerSendUpdateQueryResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CasperServerSendUpdateQueryResult(%+v)", *p)
}

// Attributes:
//  - Hash
type CasperServerSendDeleteQueryArgs struct {
  Hash string `thrift:"hash,1" db:"hash" json:"hash"`
}

func NewCasperServerSendDeleteQueryArgs() *CasperServerSendDeleteQueryArgs {
  return &CasperServerSendDeleteQueryArgs{}
}


func (p *CasperServerSendDeleteQueryArgs) GetHash() string {
  return p.Hash
}
func (p *CasperServerSendDeleteQueryArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CasperServerSendDeleteQueryArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Hash = v
}
  return nil
}

func (p *CasperServerSendDeleteQueryArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SendDeleteQuery_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CasperServerSendDeleteQueryArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hash", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hash: ", p), err) }
  if err := oprot.WriteString(string(p.Hash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hash (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hash: ", p), err) }
  return err
}

func (p *CasperServerSendDeleteQueryArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CasperServerSendDeleteQueryArgs(%+v)", *p)
}

// Attributes:
//  - Success
type CasperServerSendDeleteQueryResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewCasperServerSendDeleteQueryResult() *CasperServerSendDeleteQueryResult {
  return &CasperServerSendDeleteQueryResult{}
}

var CasperServerSendDeleteQueryResult_Success_DEFAULT string
func (p *CasperServerSendDeleteQueryResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return CasperServerSendDeleteQueryResult_Success_DEFAULT
  }
return *p.Success
}
func (p *CasperServerSendDeleteQueryResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CasperServerSendDeleteQueryResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CasperServerSendDeleteQueryResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *CasperServerSendDeleteQueryResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SendDeleteQuery_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CasperServerSendDeleteQueryResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CasperServerSendDeleteQueryResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CasperServerSendDeleteQueryResult(%+v)", *p)
}

// Attributes:
//  - UUID
//  - Ninfo
type CasperServerSendVerificationQueryArgs struct {
  UUID string `thrift:"UUID,1" db:"UUID" json:"UUID"`
  Ninfo *NodeInfo `thrift:"ninfo,2" db:"ninfo" json:"ninfo"`
}

func NewCasperServerSendVerificationQueryArgs() *CasperServerSendVerificationQueryArgs {
  return &CasperServerSendVerificationQueryArgs{}
}


func (p *CasperServerSendVerificationQueryArgs) GetUUID() string {
  return p.UUID
}
var CasperServerSendVerificationQueryArgs_Ninfo_DEFAULT *NodeInfo
func (p *CasperServerSendVerificationQueryArgs) GetNinfo() *NodeInfo {
  if !p.IsSetNinfo() {
    return CasperServerSendVerificationQueryArgs_Ninfo_DEFAULT
  }
return p.Ninfo
}
func (p *CasperServerSendVerificationQueryArgs) IsSetNinfo() bool {
  return p.Ninfo != nil
}

func (p *CasperServerSendVerificationQueryArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CasperServerSendVerificationQueryArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UUID = v
}
  return nil
}

func (p *CasperServerSendVerificationQueryArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Ninfo = &NodeInfo{}
  if err := p.Ninfo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ninfo), err)
  }
  return nil
}

func (p *CasperServerSendVerificationQueryArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SendVerificationQuery_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CasperServerSendVerificationQueryArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("UUID", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:UUID: ", p), err) }
  if err := oprot.WriteString(string(p.UUID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.UUID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:UUID: ", p), err) }
  return err
}

func (p *CasperServerSendVerificationQueryArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ninfo", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ninfo: ", p), err) }
  if err := p.Ninfo.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ninfo), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ninfo: ", p), err) }
  return err
}

func (p *CasperServerSendVerificationQueryArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CasperServerSendVerificationQueryArgs(%+v)", *p)
}

type CasperServerSendVerificationQueryResult struct {
}

func NewCasperServerSendVerificationQueryResult() *CasperServerSendVerificationQueryResult {
  return &CasperServerSendVerificationQueryResult{}
}

func (p *CasperServerSendVerificationQueryResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CasperServerSendVerificationQueryResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SendVerificationQuery_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CasperServerSendVerificationQueryResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CasperServerSendVerificationQueryResult(%+v)", *p)
}

// Attributes:
//  - Info
type CasperServerSendChunkInfoArgs struct {
  Info *ChunkInfo `thrift:"info,1" db:"info" json:"info"`
}

func NewCasperServerSendChunkInfoArgs() *CasperServerSendChunkInfoArgs {
  return &CasperServerSendChunkInfoArgs{}
}

var CasperServerSendChunkInfoArgs_Info_DEFAULT *ChunkInfo
func (p *CasperServerSendChunkInfoArgs) GetInfo() *ChunkInfo {
  if !p.IsSetInfo() {
    return CasperServerSendChunkInfoArgs_Info_DEFAULT
  }
return p.Info
}
func (p *CasperServerSendChunkInfoArgs) IsSetInfo() bool {
  return p.Info != nil
}

func (p *CasperServerSendChunkInfoArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CasperServerSendChunkInfoArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Info = &ChunkInfo{}
  if err := p.Info.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Info), err)
  }
  return nil
}

func (p *CasperServerSendChunkInfoArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SendChunkInfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CasperServerSendChunkInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("info", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:info: ", p), err) }
  if err := p.Info.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Info), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:info: ", p), err) }
  return err
}

func (p *CasperServerSendChunkInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CasperServerSendChunkInfoArgs(%+v)", *p)
}

type CasperServerSendChunkInfoResult struct {
}

func NewCasperServerSendChunkInfoResult() *CasperServerSendChunkInfoResult {
  return &CasperServerSendChunkInfoResult{}
}

func (p *CasperServerSendChunkInfoResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CasperServerSendChunkInfoResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SendChunkInfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CasperServerSendChunkInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CasperServerSendChunkInfoResult(%+v)", *p)
}

// Attributes:
//  - UUID
//  - IpfsAddr
//  - HashDiffuse
type CasperServerSendChecksumHashArgs struct {
  UUID string `thrift:"UUID,1" db:"UUID" json:"UUID"`
  IpfsAddr string `thrift:"ipfsAddr,2" db:"ipfsAddr" json:"ipfsAddr"`
  HashDiffuse string `thrift:"hashDiffuse,3" db:"hashDiffuse" json:"hashDiffuse"`
}

func NewCasperServerSendChecksumHashArgs() *CasperServerSendChecksumHashArgs {
  return &CasperServerSendChecksumHashArgs{}
}


func (p *CasperServerSendChecksumHashArgs) GetUUID() string {
  return p.UUID
}

func (p *CasperServerSendChecksumHashArgs) GetIpfsAddr() string {
  return p.IpfsAddr
}

func (p *CasperServerSendChecksumHashArgs) GetHashDiffuse() string {
  return p.HashDiffuse
}
func (p *CasperServerSendChecksumHashArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CasperServerSendChecksumHashArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UUID = v
}
  return nil
}

func (p *CasperServerSendChecksumHashArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IpfsAddr = v
}
  return nil
}

func (p *CasperServerSendChecksumHashArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.HashDiffuse = v
}
  return nil
}

func (p *CasperServerSendChecksumHashArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SendChecksumHash_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CasperServerSendChecksumHashArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("UUID", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:UUID: ", p), err) }
  if err := oprot.WriteString(string(p.UUID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.UUID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:UUID: ", p), err) }
  return err
}

func (p *CasperServerSendChecksumHashArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ipfsAddr", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ipfsAddr: ", p), err) }
  if err := oprot.WriteString(string(p.IpfsAddr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ipfsAddr (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ipfsAddr: ", p), err) }
  return err
}

func (p *CasperServerSendChecksumHashArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hashDiffuse", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:hashDiffuse: ", p), err) }
  if err := oprot.WriteString(string(p.HashDiffuse)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hashDiffuse (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:hashDiffuse: ", p), err) }
  return err
}

func (p *CasperServerSendChecksumHashArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CasperServerSendChecksumHashArgs(%+v)", *p)
}

type CasperServerSendChecksumHashResult struct {
}

func NewCasperServerSendChecksumHashResult() *CasperServerSendChecksumHashResult {
  return &CasperServerSendChecksumHashResult{}
}

func (p *CasperServerSendChecksumHashResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CasperServerSendChecksumHashResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SendChecksumHash_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CasperServerSendChecksumHashResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CasperServerSendChecksumHashResult(%+v)", *p)
}

// Attributes:
//  - UUID
//  - IpfsAddr
//  - AddrToHash
type CasperServerSendValidationResultsArgs struct {
  UUID string `thrift:"UUID,1" db:"UUID" json:"UUID"`
  IpfsAddr string `thrift:"ipfsAddr,2" db:"ipfsAddr" json:"ipfsAddr"`
  AddrToHash map[string]string `thrift:"addrToHash,3" db:"addrToHash" json:"addrToHash"`
}

func NewCasperServerSendValidationResultsArgs() *CasperServerSendValidationResultsArgs {
  return &CasperServerSendValidationResultsArgs{}
}


func (p *CasperServerSendValidationResultsArgs) GetUUID() string {
  return p.UUID
}

func (p *CasperServerSendValidationResultsArgs) GetIpfsAddr() string {
  return p.IpfsAddr
}

func (p *CasperServerSendValidationResultsArgs) GetAddrToHash() map[string]string {
  return p.AddrToHash
}
func (p *CasperServerSendValidationResultsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CasperServerSendValidationResultsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UUID = v
}
  return nil
}

func (p *CasperServerSendValidationResultsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IpfsAddr = v
}
  return nil
}

func (p *CasperServerSendValidationResultsArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.AddrToHash =  tMap
  for i := 0; i < size; i ++ {
var _key27 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key27 = v
}
var _val28 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val28 = v
}
    p.AddrToHash[_key27] = _val28
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *CasperServerSendValidationResultsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SendValidationResults_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CasperServerSendValidationResultsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("UUID", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:UUID: ", p), err) }
  if err := oprot.WriteString(string(p.UUID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.UUID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:UUID: ", p), err) }
  return err
}

func (p *CasperServerSendValidationResultsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ipfsAddr", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ipfsAddr: ", p), err) }
  if err := oprot.WriteString(string(p.IpfsAddr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ipfsAddr (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ipfsAddr: ", p), err) }
  return err
}

func (p *CasperServerSendValidationResultsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("addrToHash", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:addrToHash: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.AddrToHash)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.AddrToHash {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:addrToHash: ", p), err) }
  return err
}

func (p *CasperServerSendValidationResultsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CasperServerSendValidationResultsArgs(%+v)", *p)
}

type CasperServerSendValidationResultsResult struct {
}

func NewCasperServerSendValidationResultsResult() *CasperServerSendValidationResultsResult {
  return &CasperServerSendValidationResultsResult{}
}

func (p *CasperServerSendValidationResultsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CasperServerSendValidationResultsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SendValidationResults_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CasperServerSendValidationResultsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CasperServerSendValidationResultsResult(%+v)", *p)
}

// Attributes:
//  - UUID
//  - First
//  - Last
//  - Salt
type CasperServerGetFileChecksumArgs struct {
  UUID string `thrift:"uuid,1" db:"uuid" json:"uuid"`
  First int64 `thrift:"first,2" db:"first" json:"first"`
  Last int64 `thrift:"last,3" db:"last" json:"last"`
  Salt string `thrift:"salt,4" db:"salt" json:"salt"`
}

func NewCasperServerGetFileChecksumArgs() *CasperServerGetFileChecksumArgs {
  return &CasperServerGetFileChecksumArgs{}
}


func (p *CasperServerGetFileChecksumArgs) GetUUID() string {
  return p.UUID
}

func (p *CasperServerGetFileChecksumArgs) GetFirst() int64 {
  return p.First
}

func (p *CasperServerGetFileChecksumArgs) GetLast() int64 {
  return p.Last
}

func (p *CasperServerGetFileChecksumArgs) GetSalt() string {
  return p.Salt
}
func (p *CasperServerGetFileChecksumArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CasperServerGetFileChecksumArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UUID = v
}
  return nil
}

func (p *CasperServerGetFileChecksumArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.First = v
}
  return nil
}

func (p *CasperServerGetFileChecksumArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Last = v
}
  return nil
}

func (p *CasperServerGetFileChecksumArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Salt = v
}
  return nil
}

func (p *CasperServerGetFileChecksumArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetFileChecksum_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CasperServerGetFileChecksumArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uuid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uuid: ", p), err) }
  if err := oprot.WriteString(string(p.UUID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uuid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uuid: ", p), err) }
  return err
}

func (p *CasperServerGetFileChecksumArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("first", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:first: ", p), err) }
  if err := oprot.WriteI64(int64(p.First)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.first (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:first: ", p), err) }
  return err
}

func (p *CasperServerGetFileChecksumArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("last", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:last: ", p), err) }
  if err := oprot.WriteI64(int64(p.Last)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.last (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:last: ", p), err) }
  return err
}

func (p *CasperServerGetFileChecksumArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("salt", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:salt: ", p), err) }
  if err := oprot.WriteString(string(p.Salt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.salt (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:salt: ", p), err) }
  return err
}

func (p *CasperServerGetFileChecksumArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CasperServerGetFileChecksumArgs(%+v)", *p)
}

// Attributes:
//  - Success
type CasperServerGetFileChecksumResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewCasperServerGetFileChecksumResult() *CasperServerGetFileChecksumResult {
  return &CasperServerGetFileChecksumResult{}
}

var CasperServerGetFileChecksumResult_Success_DEFAULT string
func (p *CasperServerGetFileChecksumResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return CasperServerGetFileChecksumResult_Success_DEFAULT
  }
return *p.Success
}
func (p *CasperServerGetFileChecksumResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CasperServerGetFileChecksumResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CasperServerGetFileChecksumResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *CasperServerGetFileChecksumResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetFileChecksum_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CasperServerGetFileChecksumResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CasperServerGetFileChecksumResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CasperServerGetFileChecksumResult(%+v)", *p)
}

// Attributes:
//  - Hash
//  - BlockedIpfsAddr
//  - SizeToStore
type CasperServerSendReplicationQueryArgs struct {
  Hash string `thrift:"hash,1" db:"hash" json:"hash"`
  BlockedIpfsAddr string `thrift:"blockedIpfsAddr,2" db:"blockedIpfsAddr" json:"blockedIpfsAddr"`
  SizeToStore int64 `thrift:"sizeToStore,3" db:"sizeToStore" json:"sizeToStore"`
}

func NewCasperServerSendReplicationQueryArgs() *CasperServerSendReplicationQueryArgs {
  return &CasperServerSendReplicationQueryArgs{}
}


func (p *CasperServerSendReplicationQueryArgs) GetHash() string {
  return p.Hash
}

func (p *CasperServerSendReplicationQueryArgs) GetBlockedIpfsAddr() string {
  return p.BlockedIpfsAddr
}

func (p *CasperServerSendReplicationQueryArgs) GetSizeToStore() int64 {
  return p.SizeToStore
}
func (p *CasperServerSendReplicationQueryArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CasperServerSendReplicationQueryArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Hash = v
}
  return nil
}

func (p *CasperServerSendReplicationQueryArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.BlockedIpfsAddr = v
}
  return nil
}

func (p *CasperServerSendReplicationQueryArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SizeToStore = v
}
  return nil
}

func (p *CasperServerSendReplicationQueryArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SendReplicationQuery_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CasperServerSendReplicationQueryArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hash", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hash: ", p), err) }
  if err := oprot.WriteString(string(p.Hash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hash (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hash: ", p), err) }
  return err
}

func (p *CasperServerSendReplicationQueryArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("blockedIpfsAddr", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:blockedIpfsAddr: ", p), err) }
  if err := oprot.WriteString(string(p.BlockedIpfsAddr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.blockedIpfsAddr (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:blockedIpfsAddr: ", p), err) }
  return err
}

func (p *CasperServerSendReplicationQueryArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sizeToStore", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sizeToStore: ", p), err) }
  if err := oprot.WriteI64(int64(p.SizeToStore)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sizeToStore (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sizeToStore: ", p), err) }
  return err
}

func (p *CasperServerSendReplicationQueryArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CasperServerSendReplicationQueryArgs(%+v)", *p)
}

// Attributes:
//  - Success
type CasperServerSendReplicationQueryResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewCasperServerSendReplicationQueryResult() *CasperServerSendReplicationQueryResult {
  return &CasperServerSendReplicationQueryResult{}
}

var CasperServerSendReplicationQueryResult_Success_DEFAULT string
func (p *CasperServerSendReplicationQueryResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return CasperServerSendReplicationQueryResult_Success_DEFAULT
  }
return *p.Success
}
func (p *CasperServerSendReplicationQueryResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CasperServerSendReplicationQueryResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CasperServerSendReplicationQueryResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *CasperServerSendReplicationQueryResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SendReplicationQuery_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CasperServerSendReplicationQueryResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CasperServerSendReplicationQueryResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CasperServerSendReplicationQueryResult(%+v)", *p)
}

type CasperServerPingArgs struct {
}

func NewCasperServerPingArgs() *CasperServerPingArgs {
  return &CasperServerPingArgs{}
}

func (p *CasperServerPingArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CasperServerPingArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Ping_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CasperServerPingArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CasperServerPingArgs(%+v)", *p)
}

// Attributes:
//  - Success
type CasperServerPingResult struct {
  Success *PingResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewCasperServerPingResult() *CasperServerPingResult {
  return &CasperServerPingResult{}
}

var CasperServerPingResult_Success_DEFAULT *PingResult_
func (p *CasperServerPingResult) GetSuccess() *PingResult_ {
  if !p.IsSetSuccess() {
    return CasperServerPingResult_Success_DEFAULT
  }
return p.Success
}
func (p *CasperServerPingResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CasperServerPingResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CasperServerPingResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &PingResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *CasperServerPingResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Ping_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CasperServerPingResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CasperServerPingResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CasperServerPingResult(%+v)", *p)
}


